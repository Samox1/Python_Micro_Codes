wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[Dermatology[,34] == "?",]
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology[Dermatology[,34] == "?",]
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
library(RCurl)
library(gdata)
source("funkcje.R")
set.seed(125)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
rint("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
flds <- createFolds(Transfusion_Bin, k = 10, list = TRUE, returnTrain = FALSE)
View(flds)
?createFolds
flds <- createFolds(Transfusion_Bin$Y_out, k = 10, list = TRUE, returnTrain = FALSE)
View(flds)
flds <- createFolds(Transfusion_Bin$Y_out, k = 5, list = TRUE, returnTrain = FALSE)
View(flds)
flds[2]
flds[3]
test.x <- Transfusion_Bin[flds[2]]
test.x <- Transfusion_Bin[flds[2],]
View(flds)
flds <- createFolds(Transfusion_Bin$Y_out, k = 5, list = TRUE, returnTrain = FALSE)
test.x <- Transfusion_Bin[flds[[2]],]
View(test.x)
train.x <- Transfusion_Bin[-test.x,]
train.x <- Transfusion_Bin[[-test.x,]]
train.x <- Transfusion_Bin[[-test.x,]]
train.x <- Transfusion_Bin[-test.x,]
train.x <- Transfusion_Bin[-flds[[2]],]
View(train.x)
Dermatology <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
# 35 kolumn - klasy w 35 kolumnie
# brak 8 sztuk w Age (kolumna 34) - zamiast sa "?"
# kolumna 34 wciagana jest jako "factor"
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
# -->  przydalaby sie funkcja na losowanie danych treningowych z roznych klas
training.samples <- Dermatology[,"V35"] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Dermatology[training.samples, ]
test.data <- Dermatology[-training.samples, ]
knn_model_Class_caret <- knn3(formula = V35 ~ . , data = train.data, k = 2)   # <--- KNN cos nie dziala
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
print(ModelOcena( test.data$V35, pred_knn_model_Class_caret))
?svm
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
### ---> Trzeba podzielic zbior danych w miare rownomiernie jesli chodzi o klasy (0:570 & 1:178)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
?data.frame
?append
?rbind
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
?data.frame
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data, minsplit = 1, maxdepth = 5)
pred_Drzewko_Bin_rpart_class <- predict(Drzewko_Bin_rpart, newdata = test.data, type="class")
pred_Drzewko_Bin_rpart <- predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2]
ROCit_Drzewko_Bin_rpart <- rocit(score=pred_Drzewko_Bin_rpart, class = test.data$Y_out)
summary(ROCit_Drzewko_Bin_rpart)
print(kupa <- ModelOcena(test.data$Y_out, pred_Drzewko_Bin_rpart))
source
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, seed = 512 ))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, seed = 512 ))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=2, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=5, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=10, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=2))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
knn_model_Bin <- KNNtrain(Transfusion_Bin[-5], Transfusion_Bin_Y, k=5, 0, 1)
pred_knn_Bin <- KNNpred(knn_model_Bin, Transfusion_Bin[-5])
print(ModelOcena(Transfusion_Bin$Y_out, pred_knn_Bin))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=10, typ_danych="bin", model="knn", algorytm="my"))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=2, typ_danych="bin", model="knn", algorytm="my"))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=2, typ_danych="bin", model="knn", algorytm="R"))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R"))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R", knn_k = 10))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R", knn_k = 20))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R", knn_k = 50))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R", knn_k = 100))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="R", knn_k = 70))
SVM_model_Bin_e1071 <- svm(Y_out ~ . , data = Transfusion_Bin, probability = TRUE)
pred_SVM_model_Bin_e1071 <- predict(SVM_model_Bin_e1071, Transfusion_Bin, probability = TRUE)
prob_SVM_model_Bin_e1071 <- attr(pred_SVM_model_Bin_e1071, "probabilities")[,1]
print(ModelOcena( Transfusion_Bin$Y_out, prob_SVM_model_Bin_e1071))
print(ModelOcena_Class(pred_SVM_model_Bin_e1071, Transfusion_Bin$Y_out))
prob_SVM_model_Bin_e1071 <- attr(pred_SVM_model_Bin_e1071, "probabilities")[,2]
print(ModelOcena( Transfusion_Bin$Y_out, prob_SVM_model_Bin_e1071))
print(ModelOcena_Class(pred_SVM_model_Bin_e1071, Transfusion_Bin$Y_out))
prob_SVM_model_Bin_e1071 <- attr(pred_SVM_model_Bin_e1071, "probabilities")[,1]
print(ModelOcena( Transfusion_Bin$Y_out, prob_SVM_model_Bin_e1071))
print(ModelOcena_Class(pred_SVM_model_Bin_e1071, Transfusion_Bin$Y_out))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="svm", algorytm="my", svm_cost=100))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="svm", algorytm="R", svm_cost=100))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="svm", algorytm="R", svm_cost=100))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="svm", algorytm="my", svm_cost=100))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="svm", algorytm="my", svm_cost=100, svm_lr = 0.002, svm_maxiter = 300))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="svm", algorytm="my", svm_cost=100, svm_lr = 0.001, svm_maxiter = 300))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="svm", algorytm="my", svm_cost=100, svm_lr = 0.001, svm_maxiter = 1000))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="knn", algorytm="my", knn_k = 10))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="knn", algorytm="R", knn_k = 10))
source("funkcje.R")
Dermatology <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
# 35 kolumn - klasy w 35 kolumnie
# brak 8 sztuk w Age (kolumna 34) - zamiast sa "?"
# kolumna 34 wciagana jest jako "factor"
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
print(Krosswalidacja_param(Dane = Dermatology, Dane_Y=Dermatology$V35, Dane_Y_Y=Dermatology_Y, k_folds=5, typ_danych="class", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
print(Krosswalidacja_param(Dane = Dermatology, Dane_Y=Dermatology$V35, Dane_Y_Y=Dermatology_Y, k_folds=5, typ_danych="class", model="knn", algorytm="R", knn_k = 5))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Dermatology, Dane_Y=Dermatology$V35, Dane_Y_Y=Dermatology_Y, k_folds=5, typ_danych="class", model="knn", algorytm="R", knn_k = 5))
print(Krosswalidacja_param(Dane = Dermatology, Dane_Y=Dermatology$V35, Dane_Y_Y=Dermatology_Y, k_folds=5, typ_danych="class", model="knn", algorytm="my", knn_k = 5))
Concrete <- as.data.frame(read_xls("Concrete_Data.xls"))
colnames(Concrete)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
print(summary(Concrete))
for (x in 1:(ncol(Concrete)-1)) {
Concrete[,x] = norm_minmax(Concrete[,x])
}
training.samples <- Concrete[,9] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Concrete[training.samples, ]
test.data <- Concrete[-training.samples, ]
source("funkcje.R")
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="my", knn_k = 5))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="R", knn_k = 5))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="R", knn_k = 50))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="R", knn_k = 3))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="R", knn_k = 5))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="tree", algorytm="R"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=20))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="my", knn_k = 5))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="knn", algorytm="R", knn_k = 5))
print(Krosswalidacja_param(Dane = Concrete, Dane_Y=Concrete$Wytrzymalosc, Dane_Y_Y=NULL, k_folds=5, typ_danych="reg", model="tree", algorytm="R", tree_minsplit=10, tree_maxdepth=20))
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
# --- Drzewko Binarne - rpart --- #
cat("\n")
print("### --- Tree - rpart --- ###")
tree_minsplit_range = 1:20
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
tree_minsplit_range = 1:20
for (minsplit in tree_minsplit_range) {
print(minsplit)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=7))
}
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
tree_minsplit_range = 1:20
for (minsplit in tree_minsplit_range) {
print(minsplit)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=7))
}
tree_minsplit_range = 1:50
for (minsplit in tree_minsplit_range) {
print(minsplit)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=7))
}
tree_maxdepth_range = 1:15
tree_maxdepth_range = 1:15
for (maxdep in tree_maxdepth_range) {
print(maxdep)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=maxdep))
}
tree_maxdepth_range = 1:15
for (maxdep in tree_maxdepth_range) {
print(maxdep)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=10, tree_maxdepth=maxdep))
}
?rbind
minsplit_test <- Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=5)
tree_minsplit_range = 1:50
for (minsplit in tree_minsplit_range) {
#print(minsplit)
#print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=7))
minsplit_test <- rbind(minsplit_test,Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=5))
}
View(minsplit_test)
minsplit_test <- cbind(tree_minsplit_range, minsplit_test[-1,])
View(minsplit_test)
plot(minsplit_test[,1], minsplit_test$AUC)
plot(minsplit_test[,1], minsplit_test[,2])
lines(minsplit_test[,1], minsplit_test[,5])
minsplit_test <- cbind(tree_minsplit_range, minsplit_test[-1,])
ggplot(aes(x=Amanda, y=Ashley, label=year)) +
geom_point() + geom_segment(aes(xend=c(tail(Amanda, n=-1), NA), yend=c(tail(Ashley, n=-1), NA)))
View(minsplit_test)
minsplit_test <- Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=5)
tree_minsplit_range = 1:50
for (minsplit in tree_minsplit_range) {
#print(minsplit)
#print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=7))
minsplit_test <- rbind(minsplit_test,Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=minsplit, tree_maxdepth=5))
}
minsplit_test <- cbind(tree_minsplit_range, minsplit_test[-1,])
View(minsplit_test)
maxdepth_test <- Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=5)
tree_maxdepth_range = 1:15
for (maxdep in tree_maxdepth_range) {
#print(maxdep)
#print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=maxdep))
Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=maxdep)
}
maxdepth_test <- cbind(tree_maxdepth_range, maxdepth_test[-1,])
maxdepth_test <- Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=5)
tree_maxdepth_range = 1:15
for (maxdep in tree_maxdepth_range) {
#print(maxdep)
#print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=maxdep))
maxdepth_test <- rbind(maxdepth_test,Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, Dane_Y_Y=Transfusion_Bin_Y, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=25, tree_maxdepth=maxdep))
}
maxdepth_test <- cbind(tree_maxdepth_range, maxdepth_test[-1,])
View(maxdepth_test)
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 5, minobs = 25)
plot(Drzewko_Bin)
Drzewko_Bin_Vis <- ToDataFrameTree(Drzewko_Bin)
print("Drzewo Decyzyjne z najlepszymi parametrami dla Drzewa z biblioteki rpart")
print(Drzewko_Bin_Vis)
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 5, minobs = 25)
dev.copy(pdf, 'Drzewko_My_Binarne')
plot(Drzewko_Bin)
dev.off()
Drzewko_Bin_Vis <- ToDataFrameTree(Drzewko_Bin)
print("Drzewo Decyzyjne z najlepszymi parametrami dla Drzewa z biblioteki rpart")
print(Drzewko_Bin_Vis)
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 5, minobs = 25)
dev.copy(pdf, 'Drzewko_My_Binarne.pdf')
plot(Drzewko_Bin)
dev.off()
Drzewko_Bin_Vis <- ToDataFrameTree(Drzewko_Bin)
print("Drzewo Decyzyjne z najlepszymi parametrami dla Drzewa z biblioteki rpart")
print(Drzewko_Bin_Vis)
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 5, minobs = 25)
plot(Drzewko_Bin)
dev.copy(pdf, 'Drzewko_My_Binarne.pdf')
dev.off()
Drzewko_Bin_Vis <- ToDataFrameTree(Drzewko_Bin)
print("Drzewo Decyzyjne z najlepszymi parametrami dla Drzewa z biblioteki rpart")
print(Drzewko_Bin_Vis)
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 5, minobs = 25)
pdf('Drzewko_My_Binarne.pdf')
plot(Drzewko_Bin)
dev.off()
Drzewko_Bin_Vis <- ToDataFrameTree(Drzewko_Bin)
print("Drzewo Decyzyjne z najlepszymi parametrami dla Drzewa z biblioteki rpart")
print(Drzewko_Bin_Vis)
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 5, minobs = 25)
png('Drzewko_My_Binarne.png')
plot(Drzewko_Bin)
dev.off()
library(ggplot2)
ggplot(minsplit_test, aes(x=tree_minsplit_range)) +
geom_line(aes(y = ACC), color = "darkred") +
geom_line(aes(y = AUC), color="steelblue", linetype="twodash")
ggplot(as.data.frame(minsplit_test), aes(x=tree_minsplit_range)) +
geom_line(aes(y = ACC), color = "darkred") +
geom_line(aes(y = AUC), color="steelblue", linetype="twodash")
ggplot(as.data.frame(minsplit_test), aes(x=tree_minsplit_range)) +
geom_line(aes(y = minsplit_test[5]), color = "darkred") +
geom_line(aes(y = minsplit_test[3]), color="steelblue", linetype="twodash")
ggplot(as.data.frame(minsplit_test), aes(x=tree_minsplit_range)) +
geom_line(aes(y = minsplit_test[5]), color = "darkred") +
geom_line(aes(y = minsplit_test[2]), color="steelblue", linetype="twodash")
ggplot(as.data.frame(minsplit_test), aes(x=tree_minsplit_range)) +
geom_line(aes(y = minsplit_test[5]), color = "darkred") +
geom_line(aes(y = minsplit_test[2]), color="steelblue", linetype="twodash")
ggplot(as.data.frame(minsplit_test), aes(x=minsplit_test[1])) +
geom_line(aes(y = minsplit_test[5]), color = "darkred") +
geom_line(aes(y = minsplit_test[2]), color="steelblue", linetype="twodash")
ggplot(as.data.frame(minsplit_test), aes(x=minsplit_test[1])) +
geom_line(aes(y = minsplit_test[5]), color = "darkred")
### WYKRES ###
ggplot(as.data.frame(minsplit_test), aes(x=minsplit_test[1])) + geom_line(aes(y = minsplit_test[5]), color = "darkred")
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
View(knn_k_test_Reg_R)

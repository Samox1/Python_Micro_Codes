Dermatology[,34] <- as.numeric(Dermatology[,34])
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
# -->  przydalaby sie funkcja na losowanie danych treningowych z roznych klas
training.samples <- Dermatology[,"V35"] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Dermatology[training.samples, ]
test.data <- Dermatology[-training.samples, ]
knn_model_Class_caret <- knn3(V35 ~ . , data = train.data, k=2)   # <--- KNN cos nie dziala
View(knn_model_Class_caret)
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
Drzewko_Class_rpart = rpart( formula = V35 ~. , data = train.data, minsplit = 1, maxdepth = 5, method = "class")
knn_model_Class_caret <- knn3(V35 ~ . , data = train.data, k=2)   # <--- KNN cos nie dziala
View(knn_model_Class_caret)
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
knn_model_Class_caret <- knn3(formula = V35 ~ . , data = train.data, k=2)   # <--- KNN cos nie dziala
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
knn_model_Class_caret <- knn3(formula = V35 ~ . , data = Dermatology, k=2)   # <--- KNN cos nie dziala
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
Dermatology_ALL <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
# 35 kolumn - klasy w 35 kolumnie
# brak 8 sztuk w Age (kolumna 34) - zamiast sa "?"
# kolumna 34 wciagana jest jako "factor"
Dermatology <- Dermatology_ALL[!(Dermatology_ALL[,34] == "?"),]
Dermatology[,34] <- as.numeric(Dermatology[,34])
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
# -->  przydalaby sie funkcja na losowanie danych treningowych z roznych klas
training.samples <- Dermatology[,"V35"] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Dermatology[training.samples, ]
test.data <- Dermatology[-training.samples, ]
knn_model_Class_caret <- knn3(formula = V35 ~ . , data = test.data, k=2)   # <--- KNN cos nie dziala
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
print(pred_knn_model_Class_caret)
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$V35 == pred_knn_model_Class_caret,35]), " / ", All <- length(test.data$V35), " = ", Traf/All))
Drzewko_Class_rpart = rpart( formula = V35 ~. , data = train.data, minsplit = 1, maxdepth = 5, method = "class")
rpart.plot(Drzewko_Class_rpart, type = 1, extra = 1)
pred_Drzewko_Class_rpart_class <- predict(Drzewko_Class_rpart, newdata = test.data, type="class")
pred_Drzewko_Class_rpart <- predict(Drzewko_Class_rpart, newdata = test.data, type="prob")
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$V35 == pred_Drzewko_Class_rpart_class,35]), " / ", All <- length(test.data$V35), " = ", Traf/All))
knn_model_Class_caret <- knn3(formula = V35 ~ . , data = train.data, k=2)   # <--- KNN cos nie dziala
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
print(pred_knn_model_Class_caret)
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$V35 == pred_knn_model_Class_caret,35]), " / ", All <- length(test.data$V35), " = ", Traf/All))
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(pROC)
library(ROCit)
source("funkcje.R")
Concrete <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls", header = FALSE))
colnames(Regresja)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
print(summary(Concrete))
Concrete <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls", header = TRUE))
colnames(Regresja)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
print(summary(Concrete))
colnames(Concrete)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
Concrete <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls", header = TRUE))
colnames(Concrete)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
library(tidyverse)
library(readxl)
Concrete <- as.data.frame(read_excel(file="http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls", header = TRUE))
Concrete <- as.data.frame(read_excel(file="http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls"))
Concrete <- as.data.frame(read_excel("http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls"))
url_concrete <- "http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls"
Concrete <- as.data.frame(read_excel(url_concrete))
library(RCurl)
library(gdata)
url_concrete <- "http://archive.ics.uci.edu/ml/machine-learning-databases/concrete/compressive/Concrete_Data.xls"
Concrete <- as.data.frame(read_excel(url_concrete))
Concrete <- as.data.frame(read_xls(url_concrete))
file <- download.file(url_concrete)
file <- download.file(url_concrete, ".")
file <- download.file(url_concrete, ".", mode="w")
Concrete <- as.data.frame(read_xls("Concrete_Data.xls"))
colnames(Concrete)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
print(summary(Concrete))
for (x in 1:(ncol(Concrete)-1)) {
Concrete[,x] = norm_minmax(Concrete[,x])
}
View(Concrete)
training.samples <- Dermatology[,"V35"] %>% createDataPartition(p = 0.7, list = FALSE)
training.samples <- Concrete[,9] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Concrete[training.samples, ]
test.data <- Concrete[-training.samples, ]
# --- Drzewko Binarne - reczne --- #
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Bin <- Tree( Y = "Wytrzymalosc", Xnames = colnames(Concrete)[-9], data = train.data, depth = 5, minobs = 1)
plot(Drzewko_Bin)
Drzewko_Bin_rpart = rpart( formula = "Wytrzymalosc" ~ . , data = train.data, minsplit = 1, maxdepth = 5)
Drzewko_Bin_rpart = rpart( formula = Wytrzymalosc ~ . , data = train.data, minsplit = 1, maxdepth = 5)
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
View(Concrete)
Drzewko_Reg_rpart = rpart( formula = Wytrzymalosc ~ . , data = train.data, minsplit = 1, maxdepth = 5, method = "anova")
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
library(RCurl)
library(gdata)
source("funkcje.R")
Concrete <- as.data.frame(read_xls("Concrete_Data.xls"))
colnames(Concrete)<-c("Cement","Zuzel","Popiol","Woda","Superplastyfikator","Krusz_grube","Krusz_drobne","Wiek","Wytrzymalosc")
print(summary(Concrete))
for (x in 1:(ncol(Concrete)-1)) {
Concrete[,x] = norm_minmax(Concrete[,x])
}
training.samples <- Concrete[,9] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Concrete[training.samples, ]
test.data <- Concrete[-training.samples, ]
# --- Drzewko Regresja - reczne --- #
cat("\n")
print("### --- Tree - reczne --- ###")
Drzewko_Reg <- Tree( Y = "Wytrzymalosc", Xnames = colnames(Concrete)[-9], data = train.data, depth = 5, minobs = 1)
# plot(Drzewko_Bin)
cat("\n")
print("### --- Tree - rpart --- ###")
Drzewko_Reg_rpart = rpart( formula = Wytrzymalosc ~ . , data = train.data, minsplit = 1, maxdepth = 5, method = "anova")
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
rpart.plot(Drzewko_Reg_rpart, type = 1, extra = 1)
pred_Drzewko_Reg_rpart_class <- predict(Drzewko_Reg_rpart, newdata = test.data)
print(ModelOcena( test.data$Y_out , pred_Drzewko_Reg_rpart))
pred_Drzewko_Reg_rpart
pred_Drzewko_Reg_rpart <- predict(Drzewko_Reg_rpart, newdata = test.data)
pred_Drzewko_Reg_rpart
Drzewko_Reg_rpart = rpart( formula = Wytrzymalosc ~ . , data = train.data, method = "anova")
pred_Drzewko_Reg_rpart <- predict(Drzewko_Reg_rpart, newdata = test.data)
pred_Drzewko_Reg_rpart
Drzewko_Reg <- Tree( Y = "Wytrzymalosc", Xnames = colnames(Concrete)[-9], data = train.data)
Drzewko_Reg <- Tree( Y = "Wytrzymalosc", Xnames = colnames(Concrete)[-9], data = train.data, depth = 10, minobs = 1)
plot(Drzewko_Bin)
plot(Drzewko_Reg)
Drzewko_Reg <- Tree( Y = "Wytrzymalosc", Xnames = colnames(Concrete)[-9], data = train.data, depth = 10, minobs = 2)
plot(Drzewko_Reg)
Drzewko_Reg
Drzewko_Reg_Vis <- ToDataFrameTree(Drzewko_Reg)
View(Drzewko_Reg_Vis)
pred_Drzewko_Reg_rpart <- predict(Drzewko_Reg_rpart, newdata = test.data)
pred_Drzewko_Reg_rpart
print(ModelOcena( test.data$Y_out , pred_Drzewko_Reg_rpart))
pred_Drzewko_Reg_rpart <- as.numeric(predict(Drzewko_Reg_rpart, newdata = test.data))
print(ModelOcena( test.data$Y_out , pred_Drzewko_Reg_rpart))
rm(pred_Drzewko_Reg_rpart_class)
View(test.data)
print(ModelOcena( test.data$Wytrzymalosc , pred_Drzewko_Reg_rpart))
knn_model_Reg <- KNNtrain(train.data[,-9], train.data$Wytrzymalosc, k=3, 0, 1)
knn_Reg <- KNNpred(knn_model_Reg, test.data[,-9])
print(ModelOcena( test.data$Wytrzymalosc , knn_Reg))
knn_model_Reg_caret <- knn3(Wytrzymalosc ~ . , data = train.data, k=5)
pred_knn_model_Reg_caret <- predict(knn_model_Reg_caret, test.data)
View(pred_knn_model_Reg_caret)
print(ModelOcena(test.data$Wytrzymalosc, pred_knn_model_Reg_caret))
Dermatology_ALL <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
# 35 kolumn - klasy w 35 kolumnie
# brak 8 sztuk w Age (kolumna 34) - zamiast sa "?"
# kolumna 34 wciagana jest jako "factor"
Dermatology <- Dermatology_ALL[!(Dermatology_ALL[,34] == "?"),]
Dermatology[,34] <- as.numeric(Dermatology[,34])
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
# -->  przydalaby sie funkcja na losowanie danych treningowych z roznych klas
training.samples <- Dermatology[,"V35"] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Dermatology[training.samples, ]
test.data <- Dermatology[-training.samples, ]
knn_model_Class <- KNNtrain(train.data[-35], train.data_Y, k=3, 0, 1)
knn_model_Class <- KNNtrain(train.data[-35], train.data$V35, k=3, 0, 1)
View(knn_model_Class)
pred_knn_Class <- KNNpred(knn_model_Class, train.data[-35])
View(knn_model_Class)
knn_model_Class <- KNNtrain(train.data[-35], train.data$V35, k=3, 0, 1)
pred_knn_Class <- KNNpred(knn_model_Class, test.data[-35])
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
library(RCurl)
library(gdata)
source("funkcje.R")
knn_model_Class <- KNNtrain(train.data[-35], train.data$V35, k=3, 0, 1)
pred_knn_Class <- KNNpred(knn_model_Class, test.data[-35])
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$V35 == pred_knn_Class,35]), " / ", All <- length(test.data$V35), " = ", Traf/All))
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$Wytrzymalosc == pred_knn_Class,35]), " / ", All <- length(test.data$Wytrzymalosc), " = ", Traf/All))
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$Wytrzymalosc == pred_knn_Class,9]), " / ", All <- length(test.data$Wytrzymalosc), " = ", Traf/All))
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data[,35] == pred_knn_Class,35]), " / ", All <- length(test.data[,35]), " = ", Traf/All))
View(pred_knn_Class)
View(pred_knn_Class)
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data[,35] == pred_knn_Class$Klasa,35]), " / ", All <- length(test.data[,35]), " = ", Traf/All))
print(paste("Trafione klasy = ", Traf <- length(test.data[test.data$V35 == pred_knn_Class$Klasa,35]), " / ", All <- length(test.data$V35), " = ", Traf/All))
knn_model_Bin <- KNNtrain(Transfusion_Bin[-5], Transfusion_Bin_Y, k=3, 0, 1)
pred_knn_Bin <- KNNpred(knn_model_Bin, Transfusion_Bin[-5])
print(ModelOcena(Transfusion_Bin$Y_out, pred_knn_model_Bin))
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
### ---> Trzeba podzielic zbior danych w miare rownomiernie jesli chodzi o klasy (0:570 & 1:178)
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
knn_model_Bin <- KNNtrain(Transfusion_Bin[-5], Transfusion_Bin_Y, k=3, 0, 1)
pred_knn_Bin <- KNNpred(knn_model_Bin, Transfusion_Bin[-5])
print(ModelOcena(Transfusion_Bin$Y_out, pred_knn_model_Bin))
print(ModelOcena(Transfusion_Bin$Y_out, pred_knn_Bin))
knn_model_Bin_caret <- knn3(Y_out ~ . , data = Transfusion_Bin, k=5)
pred_knn_model_Bin_caret <- predict(knn_model_Bin_caret, Transfusion_Bin, type="prob")[,2]
print(ModelOcena(Transfusion_Bin$Y_out, pred_knn_model_Bin_caret))
source('C:/Users/install/Desktop/GitHub/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('C:/Users/install/Desktop/GitHub/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
library(RCurl)
library(gdata)
source("funkcje.R")
set.seed(125)
Dermatology_ALL <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
# Dermatology <- Dermatology_ALL[!(Dermatology_ALL[,34] == "?"),]
Dermatology <- Dermatology_ALL
Dermatology <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
Dermatology_wiek <- Dermatology[!(Dermatology[,34] == "?"),34]
Wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
Wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
wiek_mean <- round(mean(Dermatology_wiek),0)
rm(Dermatology)
rm(Dermatology_ALL)
rm(Dermatology_wiek)
rm(Wiek_mean)
rm(wiek_mean)
Dermatology <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
View(Dermatology)
Dermatology[Dermatology[,34] == "?",34]
Dermatology[Dermatology[,34] == "?"]
Dermatology[Dermatology[,34] == "?",]
Dermatology <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[Dermatology[,34] == "?",]
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology[Dermatology[,34] == "?",]
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
library(RCurl)
library(gdata)
source("funkcje.R")
set.seed(125)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
rint("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
flds <- createFolds(Transfusion_Bin, k = 10, list = TRUE, returnTrain = FALSE)
View(flds)
?createFolds
flds <- createFolds(Transfusion_Bin$Y_out, k = 10, list = TRUE, returnTrain = FALSE)
View(flds)
flds <- createFolds(Transfusion_Bin$Y_out, k = 5, list = TRUE, returnTrain = FALSE)
View(flds)
flds[2]
flds[3]
test.x <- Transfusion_Bin[flds[2]]
test.x <- Transfusion_Bin[flds[2],]
View(flds)
flds <- createFolds(Transfusion_Bin$Y_out, k = 5, list = TRUE, returnTrain = FALSE)
test.x <- Transfusion_Bin[flds[[2]],]
View(test.x)
train.x <- Transfusion_Bin[-test.x,]
train.x <- Transfusion_Bin[[-test.x,]]
train.x <- Transfusion_Bin[[-test.x,]]
train.x <- Transfusion_Bin[-test.x,]
train.x <- Transfusion_Bin[-flds[[2]],]
View(train.x)
Dermatology <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/dermatology/dermatology.data", header = FALSE))
# 35 kolumn - klasy w 35 kolumnie
# brak 8 sztuk w Age (kolumna 34) - zamiast sa "?"
# kolumna 34 wciagana jest jako "factor"
print(paste("Jakies wartosci ANY = " , any(is.na(Dermatology))))
Dermatology_wiek <- as.numeric(Dermatology[!(Dermatology[,34] == "?"),34])
wiek_mean <- round(mean(Dermatology_wiek),0)
Dermatology[,34] <- ifelse(Dermatology[,34] == "?", wiek_mean, Dermatology[,34] )
Dermatology_Y <- Dermatology$V35
Dermatology$V35 <- factor(Dermatology$V35)
# -->  przydalaby sie funkcja na losowanie danych treningowych z roznych klas
training.samples <- Dermatology[,"V35"] %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Dermatology[training.samples, ]
test.data <- Dermatology[-training.samples, ]
knn_model_Class_caret <- knn3(formula = V35 ~ . , data = train.data, k = 2)   # <--- KNN cos nie dziala
pred_knn_model_Class_caret <- predict(knn_model_Class_caret, test.data, type="class")
print(ModelOcena( test.data$V35, pred_knn_model_Class_caret))
?svm
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(data.tree)
library(pROC)
library(ROCit)
library(tidyverse)
library(readxl)
source("funkcje.R")
set.seed(125)
Transfusion_Bin <- as.data.frame(read.csv(file="http://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
print(paste("Jakies wartosci ANY = " , any(is.na(Transfusion_Bin))))
Transfusion_Bin_Y <- Transfusion_Bin$Y_out
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
print(summary(Transfusion_Bin))
for (x in 1:(ncol(Transfusion_Bin)-1)) {
Transfusion_Bin[,x] = norm_minmax(Transfusion_Bin[,x])
}
print(summary(Transfusion_Bin))
### ---> Trzeba podzielic zbior danych w miare rownomiernie jesli chodzi o klasy (0:570 & 1:178)
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.7, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
?data.frame
?append
?rbind
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
?data.frame
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data, minsplit = 1, maxdepth = 5)
pred_Drzewko_Bin_rpart_class <- predict(Drzewko_Bin_rpart, newdata = test.data, type="class")
pred_Drzewko_Bin_rpart <- predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2]
ROCit_Drzewko_Bin_rpart <- rocit(score=pred_Drzewko_Bin_rpart, class = test.data$Y_out)
summary(ROCit_Drzewko_Bin_rpart)
print(kupa <- ModelOcena(test.data$Y_out, pred_Drzewko_Bin_rpart))
source
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, name_Y = "Y_out"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, seed = 512 ))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, seed = 512 ))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=2, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=5, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=10, tree_maxdepth=5))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=2))
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="tree", algorytm="R", tree_minsplit=1, tree_maxdepth=7))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
knn_model_Bin <- KNNtrain(Transfusion_Bin[-5], Transfusion_Bin_Y, k=5, 0, 1)
pred_knn_Bin <- KNNpred(knn_model_Bin, Transfusion_Bin[-5])
print(ModelOcena(Transfusion_Bin$Y_out, pred_knn_Bin))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))
source("funkcje.R")
print(Krosswalidacja_param(Dane = Transfusion_Bin, Dane_Y=Transfusion_Bin$Y_out, k_folds=5, typ_danych="bin", model="knn", algorytm="my"))

childL$Depth <- node$Depth + 1
childL$Val <- bestSplit$lVal
BuildTree( childL, Y, Xnames, childFrame[["TRUE"]], depth, minobs )
namer <- sprintf( "%s >  %s",  rownames(bestSplit), bestSplit$point )
childR <- node$AddChild( namer )
childR$Depth <- node$Depth + 1
childR$Val <- bestSplit$rVal
BuildTree( childR, Y, Xnames, childFrame[["FALSE"]], depth, minobs )
}
Tree <- function( Y, Xnames, data, depth, minobs ){
tree <- Node$new( "Root" )
tree$Depth <- 0
tree$Count <- nrow( data )
tree$Val <- Entropy( Prob( data[,Y] ) )
BuildTree( tree, Y, Xnames, data, depth, minobs )
return( tree )
}
Drzewko <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 3, minobs = 1)
rm(list=ls())
library(caret)
library(rpart)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
### --- Binarna --- ###
# Dane: Transfusion.csv
# Zmienne są następujące:
#R. Recency - miesiące od ostatniej darowizny
#F. Częstotliwość - całkowita liczba darowizn
#M. Monetary - całkowita oddana krew w cm3 (ml)
#T. Czas - miesiące od pierwszej darowizny
#y. zmienna binarna określająca, czy oddał krew w marcu 2007 r. (1 = tak; 0 = nie)
Transfusion_Bin <- as.data.frame(read.csv(file="Transfusion.csv"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
Drzewko <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Transfusion_Bin, depth = 3, minobs = 1)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
Prob <- function( y ){
res <- unname( table( y ) )
res <- res / sum( res )
return( res )
}
#prob<-Prob(Binarna$Y_out)
Entropy <- function( prob ){
res <- prob * log2( prob )
res[ prob == 0 ] <- 0
res <- -sum( res )
return( res )
}
#Entropy(prob)
SplitNum <- function(Y, x, parentVal, splits, minobs){
n <- length(x)
res <- data.frame(matrix(0,length(splits),6))
colnames(res) <- c("InfGain","lVal","rVal","point","ln","rn")
for(i in 1:length(splits)){
partition <- x <= splits[i]
ln <- sum(partition)
rn <- n - ln
print(any(c(ln,rn) < minobs))
if(any(c(ln,rn) < minobs)){
res[i,] <- 0
}else{
lVal <- Entropy(Prob(Y[partition]))
rVal <- Entropy(Prob(Y[!partition]))
InfGain <- parentVal - (ln/n * lVal + rn/n * rVal)
res[i,"InfGain"] <- InfGain
res[i,"lVal"] <- lVal
res[i,"rVal"] <- rVal
res[i,"point"] <- splits[i]
res[i,"ln"] <- ln
res[i,"rn"] <- rn
}
}
return(res)
}
#SplitNum( Y = Binarna$Y_out , x = c(Binarna$Recency,Binarna$Frequency,Binarna$Monetary,Binarna$Time), parentVal = 1, splits = head(sort(unique(c(Binarna$Recency,Binarna$Frequency,Binarna$Monetary,Binarna$Time))),-1), minobs = 2 )
SplitVar <- function(Y, x, parentVal, minobs){
s <- unique(x)
if(length(x) == 1){
splits <- s
}else{
splits <- head(sort(s),-1)
}
res <- SplitNum(Y, x, parentVal, splits, minobs)
incl <- res$ln >= minobs & res$rn >= minobs & res$InfGain > 0
res <- res[ incl, , drop = F ]
best <- which.max( res$InfGain )
res <- res[ best, , drop = F ]
return( res )
}
#SplitVar( Y = Binarna$Y_out, x = c(Binarna$Recency,Binarna$Frequency,Binarna$Monetary,Binarna$Time), parentVal = 1, minobs = 2 )
FindBestSplit <- function( Y, Xnames, data, parentVal, minobs ){
res <- sapply( Xnames, function( i ){
SplitVar( Y = data[,Y] , x = data[,i], parentVal = parentVal, minobs = minobs )
}, simplify = F )
res <- do.call( rbind, res )
best <- which.max( res$InfGain )
res <- res[ best, , drop = F ]
return( res )
}
#FindBestSplit( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = Binarna, parentVal = 1, minobs = 2 )
library(data.tree)
Tree <- function( Y, Xnames, data, depth, minobs ){
tree <- Node$new( "Root" )
tree$Depth <- 0
tree$Count <- nrow( data )
tree$Val <- Entropy( Prob( data[,Y] ) )
BuildTree( tree, Y, Xnames, data, depth, minobs )
return( tree )
}
BuildTree <- function( node, Y, Xnames, data, depth, minobs ){
node$Count <- nrow( data )
node$Prob <- Prob( data[,Y] )
node$Class <- levels( data[,Y] )[ which.max(node$Prob) ]
bestSplit <- FindBestSplit( Y, Xnames, data, node$Val, minobs )
ifStop <- nrow( bestSplit ) == 0
if( node$Depth == depth | ifStop | all( node$Prob %in% c(0,1) ) ){
node$Leaf <- "*"
return( node )
}
splitIndx <- data[, rownames(bestSplit) ] <= bestSplit$point
childFrame <- split( data, splitIndx )
namel <- sprintf( "%s <= %s",  rownames(bestSplit), bestSplit$point )
childL <- node$AddChild( namel )
childL$Depth <- node$Depth + 1
childL$Val <- bestSplit$lVal
BuildTree( childL, Y, Xnames, childFrame[["TRUE"]], depth, minobs )
namer <- sprintf( "%s >  %s",  rownames(bestSplit), bestSplit$point )
childR <- node$AddChild( namer )
childR$Depth <- node$Depth + 1
childR$Val <- bestSplit$rVal
BuildTree( childR, Y, Xnames, childFrame[["FALSE"]], depth, minobs )
}
dane <- iris
dane <- dane[dane$Species!="setosa",]
dane$Species <- as.character(dane$Species)
dane$Species[dane$Species=="versicolor"] <- 0
dane$Species[dane$Species=="virginica"] <- 1
drzeweko <-  Tree( Y = "Species", Xnames = names(dane)[-5], data = dane, depth = 3, minobs = 1)
SplitNum <- function(Y, x, parentVal, splits, minobs){
n <- length(x)
res <- data.frame(matrix(0,length(splits),6))
colnames(res) <- c("InfGain","lVal","rVal","point","ln","rn")
for(i in 1:length(splits)){
partition <- x <= splits[i]
ln <- sum(partition)
rn <- n - ln
print(any(c(ln,rn) < minobs))
if(any(c(ln,rn) < minobs, na.rm = TRUE)){
res[i,] <- 0
}else{
lVal <- Entropy(Prob(Y[partition]))
rVal <- Entropy(Prob(Y[!partition]))
InfGain <- parentVal - (ln/n * lVal + rn/n * rVal)
res[i,"InfGain"] <- InfGain
res[i,"lVal"] <- lVal
res[i,"rVal"] <- rVal
res[i,"point"] <- splits[i]
res[i,"ln"] <- ln
res[i,"rn"] <- rn
}
}
return(res)
}
dane <- iris
dane <- dane[dane$Species!="setosa",]
dane$Species <- as.character(dane$Species)
dane$Species[dane$Species=="versicolor"] <- 0
dane$Species[dane$Species=="virginica"] <- 1
drzeweko <-  Tree( Y = "Species", Xnames = names(dane)[-5], data = dane, depth = 3, minobs = 1)
rpart( formula = Y_out~., data = Binarna, minsplit = 1, maxdepth = 3, cp = 0 )
rpart( formula = Y_out~., data = dane, minsplit = 1, maxdepth = 3, cp = 0 )
rpart( formula = dane[5]~., data = dane, minsplit = 1, maxdepth = 3, cp = 0 )
rpart( formula = names(dane)[5]~., data = dane, minsplit = 1, maxdepth = 3, cp = 0 )
View(dane)
rpart( formula = Species~., data = dane, minsplit = 1, maxdepth = 3, cp = 0 )
drzeweko
library(rpart.plot)
drzmko <- rpart( formula = Species~., data = dane, minsplit = 1, maxdepth = 3, cp = 0 )
plot(drzemko)
drzemko <- rpart( formula = Species~., data = dane, minsplit = 1, maxdepth = 3, cp = 0 )
plot(drzemko)
prp(drzemko)
fancyRpartplot(drzemko)
prp(drzemko, type = 4)
prp(drzemko, type = 5)
prp(drzemko, type = 3)
prp(drzemko, type = 1)
prp(drzemko, type = 2)
prp(drzemko, type = 4)
prp(drzemko, type = 5)
prp(drzeweko)
prp(drzemko, type = 0)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
(list=ls())
rm(list=ls())
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
Drzewko
plot(Drzewko)
library(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
plot(Drzewko)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = Transfusion_Bin, minsplit = 1, maxdepth = 3, cp = 0 )
View(Drzewko_Bin_rpart)
prp(Drzewko_Bin_rpart)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = Transfusion_Bin, minsplit = 1, maxdepth = 3)
plot(Drzewko_Bin_rpart)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = Transfusion_Bin, minsplit = 1, maxdepth = 3)
plot(Drzewko_Bin_rpart)
prp(Drzewko_Bin_rpart)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = Transfusion_Bin, minsplit = 1, maxdepth = 3, cp=0)
prp(Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = Transfusion_Bin)
prp(Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
plot(Drzewko_Bin)
rm(list=ls())
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
# Krotki przeglad danych
length(Transfusion_Bin[1])
# Krotki przeglad danych
length(Transfusion_Bin[,1])
# Krotki przeglad danych
print("Ilosc danych wejsciowych = " + length(Transfusion_Bin[,1]))
# Krotki przeglad danych
print("Ilosc danych wejsciowych = " + str(length(Transfusion_Bin[,1])))
# Krotki przeglad danych
print(str("Ilosc danych wejsciowych = " + length(Transfusion_Bin[,1])))
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: " + 0)
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
library(plotROC)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(plotROC)
source("funkcje.R")
### --- Binarna --- ###
# Dane: Transfusion.csv
# Zmienne są następujące:
#R. Recency - miesiące od ostatniej darowizny
#F. Częstotliwość - całkowita liczba darowizn
#M. Monetary - całkowita oddana krew w cm3 (ml)
#T. Czas - miesiące od pierwszej darowizny
#y. zmienna binarna określająca, czy oddał krew w marcu 2007 r. (1 = tak; 0 = nie)
Transfusion_Bin <- as.data.frame(read.csv(file="Transfusion.csv"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = train.data, depth = 3, minobs = 1)
#plot(Drzewko_Bin)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data)
#prp(Drzewko_Bin_rpart)
pred_rf <- predict(Drzewko_Bin, train.test, type="prob")[,2]
roc.estimate <- calculate_roc(pred_rf, test.data$Y_out)
single.rocplot <- ggroc(roc.estimate)
plot_journal_roc(single.rocplot)
pred_rf <- predict(Drzewko_Bin_rpart, train.test, type="prob")[,2]
roc.estimate <- calculate_roc(pred_rf, test.data$Y_out)
single.rocplot <- ggroc(roc.estimate)
plot_journal_roc(single.rocplot)
rm(list=ls())
library(caret)
library(rpart)
library(rpart.plot)
library(DiagrammeR)
library(nnet)
library(neuralnet)
library(kernlab)
library(e1071)
library(plotROC)
source("funkcje.R")
Transfusion_Bin <- as.data.frame(read.csv(file="Transfusion.csv"))
colnames(Transfusion_Bin) <- c("Recency", "Frequency","Monetary","Time","Y_out")
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = train.data, depth = 3, minobs = 1)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data)
pred_rf <- predict(Drzewko_Bin_rpart, train.test, type="prob")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, test.data, type="prob")[,2]
pred_rf <- predict(Drzewko_Bin, test.data, type="prob")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="prob")[,2]
View(Drzewko_Bin_rpart)
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="prob")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")[,2]
Transfusion_Bin$Y_out <- factor(Transfusion_Bin$Y_out)
# Krotki przeglad danych
print("Ilosc danych wejsciowych: ")
print(length(Transfusion_Bin[,1]))
training.samples <- Transfusion_Bin$Y_out %>% createDataPartition(p = 0.8, list = FALSE)
train.data  <- Transfusion_Bin[training.samples, ]
test.data <- Transfusion_Bin[-training.samples, ]
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = train.data, depth = 3, minobs = 1)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data)
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="prob")[,2]
roc.estimate <- calculate_roc(pred_rf, test.data$Y_out)
single.rocplot <- ggroc(roc.estimate)
?geom_roc
single.rocplot <- geom_roc(roc.estimate)
single.rocplot <- ggroc(roc.estimate)
single.rocplot <- geom_roc(roc.estimate)
plot_journal_roc(single.rocplot)
?geom_roc
table(test.data$Y_out, pred_rf)
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="prob")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data[-5], type="class")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="vector")[,2]
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="prob")[,2]
pred_rf <- predict(Drzewko_Bin, test.data, type="prob")
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="prob")
View(pred_rf)
pred_rf <- predict(Drzewko_Bin, test.data, type="class")
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")
table(test.data$Y_out, pred_rf)
length(pred_rf)
pred_rf
length(test.data)
length(test.data$Y_out)
pred_rf <- predict(Drzewko_Bin_rpart, data=test.data, type="class")
length(pred_rf)
length(test.data)
length(test.data$Y_out)
length(pred_rf)
library(ROCit)
test.data$Y_out
test.data
pred_rf <- predict.rpart(Drzewko_Bin_rpart, data=test.data, type="class")
pred_Tree_rpart <- predict(Drzewko_Bin_rpart, data=test.data, type="class")
length(pred_Tree_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8', echo=TRUE)
pred_Tree_rpart <- predict(Drzewko_Bin_rpart, newdata = test.data, type="class")
length(test.data$Y_out)
# test.data
length(pred_Tree_rpart)
table(test.data$Y_out, pred_Tree_rpart)
roc.estimate <- calculate_roc(pred_Tree_rpart, test.data$Y_out)
View(roc.estimate)
single.rocplot <- geom_roc(roc.estimate)
ROCit_obj <- rocit(score=pref_Tree_rpart ,class= test.data$Y_out)
ROCit_obj <- rocit(score=pred_Tree_rpart ,class= test.data$Y_out)
CM.large <- function(org.class, pred.class) {
CM <- table(org.class, pred.class)
# Skutecznof klasyfikatora
ACC <- sum(diag(CM)) / sum(CM)
# Wartoci true positive i true negative
# zak3adamy, ?e klasa "2" jest "pozytywna"
TP <- CM[2,2]
TN <- CM[1,1]
sums <- apply(CM, 1, sum)
TPR <- TP / sums[2]
FPR <- 1 - TN / sums[1]
return(c(ACC = round(ACC,4), TP = TP, TN = TN, row.names = NULL))
}
Tablica <- CM.large(test.data$Y_out, pred_Tree_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
library(pROC)
CM.large <- function(org.class, pred.class) {
CM <- table(org.class, pred.class)
# Skutecznof klasyfikatora
ACC <- sum(diag(CM)) / sum(CM)
# Wartoci true positive i true negative
# zak3adamy, ?e klasa "2" jest "pozytywna"
TP <- CM[2,2]
TN <- CM[1,1]
sums <- apply(CM, 1, sum)
TPR <- TP / sums[2]
FPR <- 1 - TN / sums[1]
return(c(ACC = round(ACC,4), Sensitivity = round(TPR, 4), Specificity = round(FPR, 4), TP = TP, TN = TN, row.names = NULL))
}
pred_Tree_rpart <- predict(Drzewko_Bin_rpart, newdata = test.data, type="class")
# table(test.data$Y_out, pred_Tree_rpart)
Tablica <- CM.large(test.data$Y_out, pred_Tree_rpart)
lrROC <- roc(test.data$Y_out ~ pred_Tree_rpart, plot=TRUE, print.auc=TRUE,col="green",lwd = 4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test.data$Y_out ~ predict(Drzewko_Bin_rpart, newdata = test.data, type="prob"), plot=TRUE, print.auc=TRUE,col="green",lwd = 4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test.data$Y_out ~ predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2], plot=TRUE, print.auc=TRUE,col="green",lwd = 4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test.data$Y_out ~ predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,1], plot=TRUE, print.auc=TRUE,col="green",lwd = 4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test.data$Y_out ~ predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2], plot=TRUE, print.auc=TRUE,col="green",lwd = 4,legacy.axes=TRUE,main="ROC Curves")
pred_Tree <- predict(Drzewko_Bin, test.data, type="class")
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
plot(Drzewko_Bin)
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = train.data, depth = 3, minobs = 1)
plot(Drzewko_Bin)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data, minsplit = 1, maxdepth = 3, cp = 0)
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
plot(Drzewko_Bin)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data, minsplit = 1, maxdepth = 3)
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
Drzewko_Bin <- Tree( Y = "Y_out", Xnames = c("Recency", "Frequency","Monetary","Time"), data = train.data, depth = 5, minobs = 1)
plot(Drzewko_Bin)
Drzewko_Bin_rpart = rpart( formula = Y_out~., data = train.data, minsplit = 1, maxdepth = 5)
rpart.plot(Drzewko_Bin_rpart, type = 1, extra = 1)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
View(ROC_Tree_rpart)
library(ROCit)
ROCit_obj <- rocit(score=predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2], class = test.data$Y_out)
plot(ROCit_obj)
View(ROCit_obj)
View(ROC_Tree_rpart)
ROC_Tree_rpart <- roc(test.data$Y_out ~ predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2], plot=TRUE, print.auc=TRUE,col="green",lwd = 4,legacy.axes=TRUE,main="ROC Curves")
ROCit_obj <- rocit(score=predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2], class = test.data$Y_out)
plot(ROCit_obj)
View(ROC_Tree_rpart)
Drzewko_Bin_DF = ToDataFrameTree(Drzewko_Bin)
View(Drzewko_Bin_DF)
?ToDataFrameTree
print(summary(Transfusion_Bin))
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
ROCit_obj1 <- rocit(score=predict(Drzewko_Bin_rpart, newdata = test.data, type="prob")[,2], class = test.data$Y_out, values = TRUE)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
View(ROCit_obj1)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
View(ROCit_Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
TPR_FPR.calc <- function(TP, TN){
TPR <- TP / (TP + TN)
FPR <- 1 - TP / (TP + TN)
return(c(TPR, FPR))
}
TPR_FPR.calc <- function(TP, TN){
TPR <- TP / (TP + TN)
FPR <- 1 - TP / (TP + TN)
return(c(round(TPR,5), round(FPR,5)))
}
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
TPR_FPR.calc <- function(TP, TN){
TPR <- TP / (TP + TN)
FPR <- 1 - (TP / (TP + TN))
return(c(round(TPR,5), round(FPR,5)))
}
View(ROCit_Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
table(test.data$Y_out, pred_Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
View(ROCit_Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
ACC_num <- (ROCit_Drzewko_Bin_rpart[["pos_count"]]+ROCit_Drzewko_Bin_rpart[["neg_count"]]) / length(test.data$Y_out)
ACC <- "Accuracy: " + str(ACC_num)
ACC_num <- (ROCit_Drzewko_Bin_rpart[["pos_count"]] + ROCit_Drzewko_Bin_rpart[["neg_count"]]) / as.double(length(test.data$Y_out))
ACC_num <- (as.double(ROCit_Drzewko_Bin_rpart[["pos_count"]]) + as.double(ROCit_Drzewko_Bin_rpart[["neg_count"]])) / as.double(length(test.data$Y_out))
ACC <- "Accuracy: " + as.character(ACC_num)
ACC_num <- (as.double(ROCit_Drzewko_Bin_rpart[["pos_count"]]) + as.double(ROCit_Drzewko_Bin_rpart[["neg_count"]])) / as.double(length(test.data$Y_out))
ACC_num <- (as.double(ROCit_Drzewko_Bin_rpart[["pos_count"]]) + as.double(ROCit_Drzewko_Bin_rpart[["neg_count"]]))
View(ROCit_Drzewko_Bin_rpart)
ROCit_Drzewko_Bin_rpart[["pos_D"]]
ROCit_Drzewko_Bin_rpart[["neg_D"]]
CM.large <- function(org.class, pred.class) {
CM <- table(org.class, pred.class)
print(CM)
ACC <- sum(diag(CM)) / sum(CM)
print(ACC)
TP <- CM[2,2]
TN <- CM[1,1]
sums <- apply(CM, 1, sum)
print(sums)
TPR <- TP / sums[2]           # Sensitivity
FPR <- 1 - TN / sums[1]       # Specificity
return(c(ACC = round(ACC,4), Sensitivity = round(TPR, 4), Specificity = round(FPR, 4), TP = TP, TN = TN, row.names = NULL))
}
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
print(Tablica_Drzewko_Bin_rpart)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/funkcje.R')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/funkcje.R')
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_knn_Tree_SVM/Glowny.R', encoding = 'UTF-8')

class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],MinMax), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],MinMax), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],MinMax), class = df_reg$class))
nn_grid_bin = expand.grid(h=c(5,5), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = svm_grid_bin, seed = 152, algorytm = "sieci")
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(nn_grid_bin)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=c(c(5,5),c(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=c(vector(5,5),vector(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
nn_grid_bin
nn_grid_bin = expand.grid(h=list(list(5,5),list(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(c(5,5),c(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
print("Neural Network - OLD - Ocena modelu na calym zbiorze: BINARNY")
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(MinMax(df_bin_norm[,6]))
# NN_model_Bin <- trainNN( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
# NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
# print(NN_predict_Bin)
# ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin))
NN_model_Bin_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna")
NN_predict_Bin_old <- predNN_old( X, NN_model_Bin_old, typ = "binarna")
# print(NN_predict_Bin_old)
# print("Neural Network - Ocena modelu na calym zbiorze: BINARNY")
print(ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin_old))[[3]])
print("--------------------------------------------------")
?rep
?nrow
nrow(z)
nrow(X)
nrow(x)
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],MinMax), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],MinMax), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],MinMax), class = df_reg$class))
nn_grid_bin = expand.grid(h=list(c(5,5),c(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
nn_grid_bin = expand.grid(h=list(list(5,5),list(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin[[1]][[1]])
nn_grid_bin = expand.grid(h=list(data.frame(5,5),data.frame(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin[[1]][[1]])
nn_grid_bin$h[1]
test = nn_grid_bin[1]
test$h[1]
nn_grid_bin = expand.grid(h=list(data.frame(5,5),data.frame(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(nn_grid_bin[[1]][[3]])
nn_grid_bin = expand.grid(h=list(matrix(5,5),matrix(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(test)
View(test[[1]][[1]])
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(vector(5,5),vector(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
?vector
nn_grid_bin = expand.grid(h=list(as.vector(5,5),as.vector(6,6)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
nn_grid_bin = expand.grid(h=list(as.vector(c(5,5))), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(c(5,5), c(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(as.data.frame(5,5), as.data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
test = nn_grid_bin[1]
View(test)
test = nn_grid_bin[1,]
View(test)
View(test[[1]][[1]])
test$h[1]
test$h[2]
test$h[3]
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],MinMax), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],MinMax), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],MinMax), class = df_reg$class))
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(nn_grid_bin)
View(nn_grid_bin[[1]][[1]])
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],MinMax), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],MinMax), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],MinMax), class = df_reg$class))
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
print("Neural Network - OLD - Ocena modelu na calym zbiorze: REGRESJA")
X = as.matrix(df_reg_norm[,1:4])
Y = as.matrix(MinMax(df_reg_norm[,5]))
Y_min = min(Y)
Y_max = max(Y)
# NN_model_Reg <- trainNN( X, as.numeric(Y), h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
# NN_predict_Reg <- predNN( X, NN_model_Reg, typ = "regresja", f_aktywacji = sigmoid)
# print(NN_predict_Reg)
# print(ModelOcena((df_reg[,5]), NN_predict_Reg))
NN_model_Reg_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja")
NN_predict_Reg_old <- predNN_old( X, NN_model_Reg_old, typ = "regresja")
NN_predict_Reg_old_Scale <- MinMaxOdwrot(NN_predict_Reg_old, Y_min, Y_max)
print(ModelOcena((df_reg_norm[,5]), NN_predict_Reg_old_Scale))
print("--------------------------------------------------")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(NN_model_Reg_old)
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],MinMax), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],MinMax), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],MinMax), class = df_reg$class))
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(NN_CV_bin)
View(NN_CV_bin[[1]][[6]])
View(NN_CV_bin[[1]][[6]])
View(NN_CV_bin[[1]][[5]])
nn_grid_bin = expand.grid(h=list(data.frame(5,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(data.frame(2:6,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin[[1]][[2]])
View(nn_grid_bin[[1]][[3]])
nn_grid_bin = expand.grid(h=list(c(2:6,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=c(data.frame(2:6,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=unlist(list(data.frame(2:6,5))), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(unlist(data.frame(2:6,5))), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(unlist( data.frame(2:6,5), use.names = FALSE )), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(unlist( c(2:6,5), use.names = FALSE )), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(data.frame(2:6,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin[[1]][[1]])
nn_grid_bin = expand.grid(h=(data.frame(2:6,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=(data.frame(c(2:6,5))), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(data.frame(2:6,5)), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin[[1]][[1]])
h_list = data.frame(2:6,5)
View(h_list)
nn_grid_bin = expand.grid(h=h_list, lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(h_list), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin[[1]][[2]])
nn_grid_bin = expand.grid(h=c(h_list), lr = c(0.01, 0.001, 0.0001), iter = 20000)
View(nn_grid_bin)
View(h_list)
h_list = data.frame(2:6,2:6)
View(h_list)
h_list = expand.grid(2:6,2:6)
View(h_list)
h_list = expand.grid(h=c(2:6,2:6))
View(h_list)
h_list = expand.grid(2:6,2:6)
nn_grid_bin = expand.grid(h=c(5,5), lr = c(0.001), iter = c(10000, 20000, 50000))
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(data.frame(5,5)), lr = c(0.001), iter = c(10000, 20000, 50000))
View(nn_grid_bin)
View(nn_grid_bin[[1]][[1]])
View(nn_grid_bin[[1]][[3]])
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(6,6)), lr = c(0.001), iter = c(10000, 20000, 50000))
View(nn_grid_bin)
View(nn_grid_bin[[1]][[6]])
View(nn_grid_bin[[1]][[5]])
View(nn_grid_bin[[1]][[6]])
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(NN_CV_bin)
View(NN_CV_bin[[1]][[5]])
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5), data.frame(6,6)), lr = c(0.001), iter = c(20000, 50000))
View(nn_grid_bin)
nn_grid_bin = expand.grid(h=list(data.frame(5,5), data.frame(5,5), data.frame(6,6)), lr = c(0.001), iter = c(20000, 50000))
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(NN_CV_bin)
View(NN_CV_bin[[1]][[4]])
View(NN_CV_bin[[1]][[4]])
View(NN_CV_bin[[1]][[5]])
View(NN_CV_bin[[1]][[6]])
View(NN_CV_bin[[1]][[1]])
View(NN_CV_bin[[1]][[2]])
View(NN_CV_bin[[1]][[5]])
nn_grid_bin = expand.grid(h=list(data.frame(4,4), data.frame(5,5), data.frame(6,6)), lr = c(0.001), iter = c(20000, 50000))
NN_CV_bin = CrossValidTune(df_bin, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = nn_grid_bin, seed = 152, algorytm = "sieci")
View(NN_CV_bin)
View(NN_CV_bin[[1]][[4]])
View(NN_CV_bin[[1]][[5]])
View(NN_CV_bin[[1]][[2]])
View(NN_CV_bin[[1]][[1]])
source("funkcje.R")
nn_grid_multi = expand.grid(h=list(data.frame(4,4), data.frame(5,5), data.frame(6,6)), lr = c(0.001), iter = c(20000, 50000))
NN_CV_multi = CrossValidTune(df_multi, X_nazwy_multi, Y_nazwy_multi, kFold = 5, parTune = nn_grid_multi, seed = 152, algorytm = "sieci")
source("funkcje.R")
nn_grid_multi = expand.grid(h=list(data.frame(5,5)), lr = c(0.001), iter = c(20000, 50000))
NN_CV_multi = CrossValidTune(df_multi, X_nazwy_multi, Y_nazwy_multi, kFold = 5, parTune = nn_grid_multi, seed = 152, algorytm = "sieci")
View(NN_CV_multi)
source("funkcje.R")
nn_grid_reg = expand.grid(h=list(data.frame(5,5)), lr = c(0.001), iter = c(20000, 50000, 100000))
NN_CV_reg = CrossValidTune(df_reg, X_nazwy_reg, Y_nazwy_reg, kFold = 5, parTune = nn_grid_reg, seed = 152, algorytm = "sieci")
View(NN_CV_reg)
View(NN_CV_reg[[1]][[3]])
h_list = expand.grid(2:6,2:6)
View(h_list)
nn_grid_bin = expand.grid(h=h_list, lr = c(0.001), iter = 20000)
View(nn_grid_bin)
View(nn_grid_bin)
h_list = expand.grid(h=c(2:4,2:4))
View(h_list)
h_list = expand.grid(c(2:4,2:4))
View(h_list)
h_list = expand.grid(c(2:4),c(2:4))
View(h_list)
nn_grid_bin = expand.grid(h=h_list, lr = c(0.001), iter = 20000)
View(nn_grid_bin)
h_list = list(expand.grid(c(2:4),c(2:4)))
View(h_list)
h_list = list(c(c(2:4),c(2:4)))
View(h_list)
h_list = list(c(2:4),c(2:4))
View(h_list)
h_list = list(c(2,4),c(3,5))
nn_grid_bin = expand.grid(h=h_list, lr = c(0.001), iter = 20000)
View(nn_grid_bin)
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_KNN_Tree_SVM_Sieci/Glowny.R', encoding = 'UTF-8')
print(ModelOcena_Jakosc((df_multi[,5]), y_hatTrain))
y_hatTrain <- as.numeric( etykiety[apply( NN_predict_Multi_old, 1, which.max )] )
View(NN_model_Multi_old)
source("funkcje.R")
print("Neural Network - OLD - Ocena modelu na calym zbiorze: WIELOKLASOWY")
NN_model_Multi_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 80000, seed = 123, typ = "wieloklasowa")
View(df_multi)
print("Neural Network - OLD - Ocena modelu na calym zbiorze: WIELOKLASOWY")
X = as.matrix(df_multi_norm[,1:4])
Y = model.matrix( ~ df_multi[,5] - 1, df_multi )
NN_model_Multi_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 80000, seed = 123, typ = "wieloklasowa")
NN_predict_Multi_old <- predNN_old( X, NN_model_Multi_old, typ = "wieloklasowa")
etykiety <- levels( df_multi[,5] )
y_hatTrain <- as.numeric( etykiety[apply( NN_predict_Multi_old, 1, which.max )] )
print(ModelOcena_Jakosc((df_multi[,5]), y_hatTrain))
klasy <- levels( df_multi[,5] )
y_hatTrain <- as.numeric( klasy[apply( NN_predict_Multi_old, 1, which.max )] )
print(ModelOcena_Jakosc((df_multi[,5]), y_hatTrain))
#regresja
print("Neural Network - OLD - Ocena modelu na calym zbiorze: REGRESJA")
X = as.matrix(df_reg_norm[,1:4])
Y = as.matrix(MinMax(df_reg_norm[,5]))
Y_min = min(Y)
Y_max = max(Y)
# NN_model_Reg <- trainNN( X, as.numeric(Y), h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
# NN_predict_Reg <- predNN( X, NN_model_Reg, typ = "regresja", f_aktywacji = sigmoid)
# print(NN_predict_Reg)
# print(ModelOcena((df_reg[,5]), NN_predict_Reg))
NN_model_Reg_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja")
NN_predict_Reg_old <- predNN_old( X, NN_model_Reg_old, typ = "regresja")
NN_predict_Reg_old_Scale <- MinMaxOdwrot(NN_predict_Reg_old, Y_min, Y_max)
print(ModelOcena((df_reg_norm[,5]), NN_predict_Reg_old_Scale))
print("--------------------------------------------------")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],MinMax), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],MinMax), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],MinMax), class = df_reg$class))
#regresja
print("Neural Network - OLD - Ocena modelu na calym zbiorze: REGRESJA")
X = as.matrix(df_reg_norm[,1:4])
Y = as.matrix(MinMax(df_reg_norm[,5]))
Y_min = min(Y)
Y_max = max(Y)
# NN_model_Reg <- trainNN( X, as.numeric(Y), h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
# NN_predict_Reg <- predNN( X, NN_model_Reg, typ = "regresja", f_aktywacji = sigmoid)
# print(NN_predict_Reg)
# print(ModelOcena((df_reg[,5]), NN_predict_Reg))
NN_model_Reg_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja")
NN_predict_Reg_old <- predNN_old( X, NN_model_Reg_old, typ = "regresja")
NN_predict_Reg_old_Scale <- MinMaxOdwrot(NN_predict_Reg_old, Y_min, Y_max)
print(ModelOcena((df_reg_norm[,5]), NN_predict_Reg_old_Scale))
print("--------------------------------------------------")
#binarna
print("Neural Network - OLD - Ocena modelu na calym zbiorze: BINARNY")
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(MinMax(df_bin_norm[,6]))
# NN_model_Bin <- trainNN( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
# NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
# print(NN_predict_Bin)
# ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin))
NN_model_Bin_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna")
NN_predict_Bin_old <- predNN_old( X, NN_model_Bin_old, typ = "binarna")
# print(NN_predict_Bin_old)
# print("Neural Network - Ocena modelu na calym zbiorze: BINARNY")
print(ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin_old))[[3]])
print("--------------------------------------------------")
print("Neural Network - OLD - Ocena modelu na calym zbiorze: WIELOKLASOWY")
X = as.matrix(df_multi_norm[,1:4])
Y = model.matrix( ~ df_multi[,5] - 1, df_multi )
NN_model_Multi_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 80000, seed = 123, typ = "wieloklasowa")
NN_predict_Multi_old <- predNN_old( X, NN_model_Multi_old, typ = "wieloklasowa")
klasy <- levels( df_multi[,5] )
NN_pred_Klasy <- as.numeric( klasy[apply( NN_predict_Multi_old, 1, which.max )] )
print(ModelOcena_Jakosc((df_multi[,5]), NN_pred_Klasy))
print("--------------------------------------------------")

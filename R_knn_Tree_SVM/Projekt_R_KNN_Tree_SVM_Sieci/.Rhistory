print(SVM_Ocena_Bin)
print("--------------------------------------------------")
######## Sieci neuronowe ########
### Szablon:
# trainNN <- function( x, y_tar, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna" / "wieloklasowa" / "regresja")
# predNN <- function( xnew, nn, typ = "binarna" / "wieloklasowa" / "regresja" )
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(df_bin_norm[,6])
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna")
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
print(NN_predict_Bin)
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(norm_0_1(df_bin_norm[,6]))
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
View(NN_predict_Bin)
ModelOcena(df_bin_norm[,6], NN_predict_Bin)
ModelOcena(as.factor(df_bin_norm[,6]), NN_predict_Bin)
ModelOcena(as.factor(df_bin_norm[,6]), as.numeric(NN_predict_Bin))
ModelOcena(as.factor(df_bin_norm[,6]), (NN_predict_Bin))
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(norm_0_1(df_bin_norm[,6]))
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
print(NN_predict_Bin)
ModelOcena(as.factor(df_bin_norm[,6]), (NN_predict_Bin))
ModelOcena((df_bin[,6]), (NN_predict_Bin))
View(df_bin)
View(df_bin[,6], NN_predict_Bin)
View(c(df_bin[,6], NN_predict_Bin))
View(cbind(df_bin[,6], NN_predict_Bin))
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix((df_bin[,6]))
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix((df_bin_norm[,6]))
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
print(NN_predict_Bin)
ModelOcena((df_bin[,6]), (NN_predict_Bin))
source('D:/Programming/Python_Micro_Codes/R_knn_Tree_SVM/Projekt_R_KNN_Tree_SVM_Sieci/Glowny.R', encoding = 'UTF-8')
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(norm_0_1(df_bin[,6]))
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(norm_0_1(df_bin[,6]))
Y = as.matrix(norm_0_1(df_bin_norm[,6]))
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
print(NN_predict_Bin)
ModelOcena((df_bin[,6]), (NN_predict_Bin))
ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin))
NN_model_Bin <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Bin <- predNN( X, NN_model_Bin, typ = "binarna", f_aktywacji = sigmoid)
print(NN_predict_Bin)
ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin))
#wieloklasowa
X = as.matrix(df_multi_norm[,1:4])
Y = as.matrix(norm_0_1(df_multi_norm[,5]))
NN_model_Multi <- trainNN( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "wieloklasowa",  f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
View(NN_model_Multi)
View(NN_model_Bin)
X = as.matrix(df_multi_norm[,1:4])
Y = as.matrix(norm_0_1(df_multi_norm[,5]))
NN_model_Multi <- trainNN( X, Y, h = c(5,5,5), lr = 0.01, iter = 10000, seed = 123, typ = "wieloklasowa",  f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Multi <- predNN( X, NN_model_Multi, typ = "wieloklasowa",  f_aktywacji = sigmoid)
print(NN_predict_Multi)
ModelOcena((df_multi[,5]), as.numeric(NN_predict_Multi))
#wieloklasowa
X = as.matrix(df_multi_norm[,1:4])
Y = as.matrix(norm_0_1(df_multi_norm[,5]))
View(Y)
NN_model_Multi <- trainNN( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "wieloklasowa",  f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Multi <- predNN( X, NN_model_Multi, typ = "wieloklasowa",  f_aktywacji = sigmoid)
print(NN_predict_Multi)
ModelOcena((df_multi[,5]), as.numeric(NN_predict_Multi))
ModelOcena_Jakosc((df_multi[,5]), as.numeric(NN_predict_Multi))
View(NN_predict_Multi)
X = as.matrix(df_reg_norm[,1:4])
Y = as.matrix(norm_0_1(df_reg_norm[,5]))
NN_model_Reg <- trainNN( X, as.numeric(Y), h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja")
NN_predict_Reg <- predNN( X, NN_model_Reg, typ = "regresja")
print(NN_predict_Reg)
print(ModelOcena((df_multi[,]), as.numeric(NN_predict_Multi)))
#regresja
X = as.matrix(df_reg_norm[,1:4])
Y = as.matrix(norm_0_1(df_reg_norm[,5]))
NN_model_Reg <- trainNN( X, as.numeric(Y), h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
NN_predict_Reg <- predNN( X, NN_model_Reg, typ = "regresja", f_aktywacji = sigmoid)
print(NN_predict_Reg)
print(ModelOcena((df_multi[,]), as.numeric(NN_predict_Multi)))
NN_model_Reg <- trainNN( X, as.numeric(Y), h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "regresja", f_aktywacji = sigmoid, df_aktywacji = dsigmoid)
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(norm_0_1(df_bin_norm[,6]))
NN_model_Bin_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna")
source("funkcje.R")
source("funkcje.R")
#binarna
X = as.matrix(df_bin_norm[,1:5])
Y = as.matrix(norm_0_1(df_bin_norm[,6]))
NN_model_Bin_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "binarna")
NN_predict_Bin_old <- predNN_old( X, NN_model_Bin_old, typ = "binarna")
print(NN_predict_Bin_old)
ModelOcena((df_bin[,6]), as.numeric(NN_predict_Bin_old))
#wieloklasowa
X = as.matrix(df_multi_norm[,1:4])
Y = as.matrix(norm_0_1(df_multi_norm[,5]))
NN_model_Multi_old <- trainNN_old( X, Y, h = c(5,5), lr = 0.01, iter = 10000, seed = 123, typ = "wieloklasowa")
View(NN_model_Multi_old)
NN_predict_Multi_old <- predNN_old( X, NN_model_Multi_old, typ = "wieloklasowa")
print(NN_predict_Multi_old)
ModelOcena_Jakosc((df_multi[,5]), as.numeric(NN_predict_Multi_old))
df_bin_original <- df_bin
df_bin[,6] = as.factor(df_bin[,6])
View(df_bin_original)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi_original <- df_multi
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
View(df_multi_original)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
View(df_multi_original)
#setwd("C:\\Users\\Dell\\Desktop\\Projekt_PG")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin_original <- df_bin
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
#binarna
Drzewko_bin <- Tree("Caesarian", X_nazwy_bin, data=df_bin, type='Gini', depth=2, minobs=2, overfit='none', cf=0.001)
#wieloklasowa
Drzewko_multi <- Tree("Class.Name", X_nazwy_multi, data=df_multi, type='Gini', depth=6, minobs=2, overfit='none', cf=0.001)
#regresja -
Drzewko_reg <- Tree("class", X_nazwy_reg, data=df_reg, type='SS', depth=9, minobs=2, overfit='none', cf=0.001)
Y_nazwy_bin = colnames(df_bin)[6]
Y_nazwy_multi = colnames(df_multi)[5]
Y_nazwy_reg = colnames(df_reg)[5]
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, 5, c(k=10), seed = 152, algorytm = "KNN" / "drzewa" / "SVM" / "sieci")
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, 5, parTune = c(k=10), seed = 152, algorytm = "KNN" / "drzewa" / "SVM" / "sieci")
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, 5, parTune = c(10), seed = 152, algorytm = "KNN" / "drzewa" / "SVM" / "sieci")
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, 5, parTune = 10, seed = 152, algorytm = "KNN" / "drzewa" / "SVM" / "sieci")
siec_grid_knn_bin = expand.grid(k=2:20)
knn_grid_bin = expand.grid(k=2:20)
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
source("funkcje.R")
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
View(df_bin_original)
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
#binarna
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNN_predict_Bin <- KNNpred(KNNmodel, X)
KNN_Ocena_Bin <- ModelOcena(y_tar, as.numeric(KNN_predict_Bin[,1]))
print("KNN - Ocena modelu na calym zbiorze: BINARNY")
print(KNN_Ocena_Bin[[3]])
print("--------------------------------------------------")
View(KNN_Ocena_Bin)
#setwd("C:\\Users\\Dell\\Desktop\\Projekt_PG")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
knn_grid_bin = expand.grid(k=2:20)
CrossValidTune(df_bin_original, X_nazwy_bin, Y_nazwy_bin, kFold = 5, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
knn_grid_multi = expand.grid(k=2:20)
CrossValidTune(df_multi_original, X_nazwy_multi, Y_nazwy_multi, kFold = 10, parTune = knn_grid_bin, seed = 152, algorytm = "KNN")
knn_grid_reg = expand.grid(k=2:20)
CrossValidTune(df_reg_original, X_nazwy_reg, Y_nazwy_reg, kFold = 5, parTune = knn_grid_multi, seed = 152, algorytm = "KNN")
#binarna
df_bin_sign <- ifelse( df_bin[,6] == 0, -1, 1)
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],norm_0_1), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],norm_0_1), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],norm_0_1), class = df_reg$class))
#binarna
df_bin_sign <- ifelse( df_bin[,6] == 0, -1, 1)
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin_sign, C=10, lr = 0.001, maxiter = 500)
SVM_predict_Bin <- predSVM(as.matrix(df_bin_norm[,1:5]), SVM_model$Theta, SVM_model$Theta0)
SVM_Ocena_Bin <- ModelOcena_Jakosc(as.factor(df_bin_sign), SVM_predict_Bin)
print("SVM - Ocena modelu na calym zbiorze: BINARNY")
print(SVM_Ocena_Bin)
print("--------------------------------------------------")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
df_bin_original <- df_bin
X_nazwy_bin = colnames(df_bin)[1:5]
Y_nazwy_bin = colnames(df_bin)[6]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
df_multi_original <- df_multi
X_nazwy_multi = colnames(df_multi)[1:4]
Y_nazwy_multi = colnames(df_multi)[5]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
df_reg_original <- df_reg
X_nazwy_reg = colnames(df_reg)[1:4]
Y_nazwy_reg = colnames(df_reg)[5]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]

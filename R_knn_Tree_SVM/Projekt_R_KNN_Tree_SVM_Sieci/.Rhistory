source("funkcje.R")
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
View(df_bin)
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
X_multi = df_multi[,2:5]
Y_multi = ifelse(df_multi[,1] == "B", 1, df_multi[,1])
Y_multi = ifelse(Y_multi == "L", 2, Y_multi)
Y_multi = ifelse(Y_multi == "R", 3, Y_multi)
View(df_multi)
View(df_multi)
View(X_multi)
Y_multi = ifelse(df_multi[,1] == "B", 1, df_multi[,1])
rm(Y_multi)
Y_multi = ifelse(df_multi[,1] == "B", 1, df_multi[,1])
view(Y_multi)
View(Y_multi)
View(Y_multi)
View(df_multi)
factor(df_multi$Class.Name)
?factor
rm(list=ls())
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
X_multi = df_multi[,2:5]
Y_multi = ifelse(df_multi[,1] == "B", 1, df_multi[,1])
Y_multi = ifelse(Y_multi == "L", 2, Y_multi)
Y_multi = ifelse(Y_multi == "R", 3, Y_multi)
print(Y_multi)
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
X_multi = df_multi[,2:5]
Y_multi = ifelse(df_multi[,1] == "B", 1, df_multi[,1])
Y_multi = ifelse(Y_multi == "L", 2, Y_multi)
Y_multi = ifelse(Y_multi == "R", 3, Y_multi)
df_multi = as.data.frame(cbind(X_multi, Y_multi))
df_multi[,5] = as.factor(df_multi[,5])
X_nazwy_multi = colnames(df_multi)[1:4]
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
motor = ifelse(df_reg[,1] == "A", 1, df_reg[,1])
motor = ifelse(motor == "B", 2, motor)
motor = ifelse(motor == "C", 3, motor)
motor = ifelse(motor == "D", 4, motor)
motor = ifelse(motor == "E", 5, motor)
motor = as.integer(motor)
screw = ifelse(df_reg[,2] == "A", 1, df_reg[,2])
screw = ifelse(screw == "B", 2, screw)
screw = ifelse(screw == "C", 3, screw)
screw = ifelse(screw == "D", 4, screw)
screw = ifelse(screw == "E", 5, screw)
screw = as.integer(screw)
df_reg = drop(df_reg[,3:5])
df_reg = as.data.frame(cbind(motor, screw, df_reg))
X_nazwy_reg = colnames(df_reg)[1:4]
class(df_reg)
class(df_reg[,5])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
class(df_multi[,1])
View(df_multi)
df_multi$Class.Name <- as.numeric(df_multi$Class.Name)
View(df_multi)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi$Class.Name <- as.numeric(df_multi$Class.Name)
df_multi = as.data.frame(cbind(df_multi[,2:5], df_multi[,1]))
df_multi[,5] = as.factor(df_multi[,5])
X_nazwy_multi = colnames(df_multi)[1:4]
class(df_multi)
class(df_multi[,5])
View(df_multi)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi$Class.Name <- as.numeric(df_multi$Class.Name)
df_multi = as.data.frame(cbind(df_multi[,2:5], df_multi$Class.Name))
df_multi[,5] = as.factor(df_multi[,5])
X_nazwy_multi = colnames(df_multi)[1:4]
class(df_multi)
class(df_multi[,5])
View(df_multi)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], df_multi$Class.Name))
df_multi$Class.Name <- as.numeric(df_multi$Class.Name)
df_multi[,5] = as.factor(df_multi[,5])
X_nazwy_multi = colnames(df_multi)[1:4]
View(df_multi)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], df_multi$Class.Name))
View(df_multi)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
View(df_multi)
df_multi$Class.Name <- as.numeric(df_multi$Class.Name)
df_multi[,5] = as.factor(df_multi[,5])
X_nazwy_multi = colnames(df_multi)[1:4]
View(df_multi)
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
View(df_multi)
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
View(df_reg)
View(df_reg)
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
View(df_reg)
X_nazwy_reg = colnames(df_reg)[1:4]
class(df_reg)
class(df_reg[,5])
#binarna
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X1, y_tar, k = 5, 0,1 )
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
View(KNNpredict_Bin)
#### WYWALIC ####
df_bin_2 <- read.csv("Transfusion.csv",header=T, sep=",")
View(df_bin_2)
X_nazwy_bin2 = colnames(df_bin)[1:4]
X_nazwy_bin2 = colnames(df_bin_2)[1:4]
#### WYWALIC ####
df_bin_2 <- read.csv("Transfusion.csv",header=T, sep=",")
colnames(df_bin_2) <- c("Recency", "Frequency","Monetary","Time","Y_out")
X_nazwy_bin2 = colnames(df_bin_2)[1:4]
##################### WYWALIC #######################
#binarna
X <- df_bin_2[,1:4]
y_tar <- df_bin[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
df_bin_2[,5] = as.factor(df_bin_2[,5])
##################### WYWALIC #######################
#binarna
X <- df_bin_2[,1:4]
y_tar <- df_bin[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
rm(list=ls())
source("funkcje.R")
#### WYWALIC ####
df_bin_2 <- read.csv("Transfusion.csv",header=T, sep=",")
colnames(df_bin_2) <- c("Recency", "Frequency","Monetary","Time","Y_out")
X_nazwy_bin2 = colnames(df_bin_2)[1:4]
df_bin_2[,5] = as.factor(df_bin_2[,5])
View(df_bin_2)
##################### WYWALIC #######################
#binarna
X <- df_bin_2[,1:4]
y_tar <- df_bin_2[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
View(KNNpredict_Bin)
ModelOcena(y_tar <- df_bin_2[,5], as.numeric(KNNpredict_Bin))
ModelOcena(y_tar <- df_bin_2[,5], as.numeric(KNNpredict_Bin[,3]))
ModelOcena(y_tar <- df_bin_2[,5], as.numeric(KNNpredict_Bin[,1]))
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
rm(list=ls())
source("funkcje.R")
#### WYWALIC ####
df_bin_2 <- read.csv("Transfusion.csv",header=T, sep=",")
colnames(df_bin_2) <- c("Recency", "Frequency","Monetary","Time","Y_out")
X_nazwy_bin2 = colnames(df_bin_2)[1:4]
df_bin_2[,5] = as.factor(df_bin_2[,5])
#### WYWALIC ####
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
X_nazwy_multi = colnames(df_multi)[1:4]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
X_nazwy_reg = colnames(df_reg)[1:4]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
X <- df_bin_2[,1:4]
y_tar <- df_bin_2[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
source("funkcje.R")
#binarna
Drzewko_bin <- Tree("Caesarian", X_nazwy_bin, data=df_bin, type='Gini', depth=2, minobs=2, overfit='none', cf=0.001)
#wieloklasowa
Drzewko_multi <- Tree("Y_multi", X_nazwy_multi, data=df_multi, type='Gini', depth=6, minobs=2, overfit='none', cf=0.001)
#regresja -
Drzewko_reg <- Tree("class", X_nazwy_reg, data=df_reg, type='SS', depth=9, minobs=2, overfit='none', cf=0.001)
#wieloklasowa
Drzewko_multi <- Tree("Y_multi", X_nazwy_multi, data=df_multi, type='Gini', depth=6, minobs=2, overfit='none', cf=0.001)
?gower.dist
test <- sapply(df_bin[,1:5],norm_0_1())
test <- sapply(df_bin[,1:5],norm_0_1)
View(test)
View(df_bin)
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
X_nazwy_multi = colnames(df_multi)[1:4]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
X_nazwy_reg = colnames(df_reg)[1:4]
class(df_reg)
class(df_reg[,5])
df_bin_norm <- cbind(sapply(df_bin[,1:5],norm_0_1), df_bin[,6])
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],norm_0_1), df_bin[,6]))
View(df_bin_norm)
View(df_bin)
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],norm_0_1), df_bin$Caesarian))
View(df_bin_norm)
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],norm_0_1), Caesarian = df_bin$Caesarian))
View(df_bin_norm)
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],norm_0_1), Class.Name = df_multi$Class.Name))
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],norm_0_1), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],norm_0_1), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],norm_0_1), class = df_reg$class))
#binarna
Drzewko_bin <- Tree("Caesarian", X_nazwy_bin, data=df_bin, type='Gini', depth=2, minobs=2, overfit='none', cf=0.001)
#wieloklasowa
Drzewko_multi <- Tree("Y_multi", X_nazwy_multi, data=df_multi, type='Gini', depth=6, minobs=2, overfit='none', cf=0.001)
#regresja -
Drzewko_reg <- Tree("class", X_nazwy_reg, data=df_reg, type='SS', depth=9, minobs=2, overfit='none', cf=0.001)
X <- df_bin_reg[,1:5]
y_tar <- df_bin_reg[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
KNN_bin_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
X <- df_bin_norm[,1:5]
y_tar <- df_bin_norm[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
#binarna
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
KNN_bin_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
View(KNN_bin_Ocena)
#wieloklasowa
X <- df_multi[,1:4]
y_tar <- df_multi[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Multi <- KNNpred(KNNmodel, X)
View(KNNpredict_Multi)
KNN_bin_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
KNN_bin_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,3]))
KNN_bin_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,2]))
KNNpredict_Multi <- KNNpred(KNNmodel, X)
KNN_multi_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Multi[,1]))
View(KNNpredict_Multi)
KNN_multi_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Multi$Klasa))
View(KNN_multi_Ocena)
#regresja
X <- df_reg[,1:4]
y_tar <- df_reg[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Reg <- KNNpred(KNNmodel, X)
KNN_bin_Ocena <- ModelOcena(y_tar, KNNpredict_Reg)
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
KNN_bin_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
#wieloklasowa
X <- df_multi[,1:4]
y_tar <- df_multi[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Multi <- KNNpred(KNNmodel, X)
#KNN_multi_Ocena <- ModelOcena(y_tar, as.numeric(KNNpredict_Multi$Klasa))
#regresja
X <- df_reg[,1:4]
y_tar <- df_reg[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Reg <- KNNpred(KNNmodel, X)
KNN_reg_Ocena <- ModelOcena(y_tar, KNNpredict_Reg)
KNNpredict_Reg <- KNNpred(KNNmodel, X)
KNN_reg_Ocena <- as.data.frame(ModelOcena(y_tar, KNNpredict_Reg))
#binarna
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
KNN_Ocena_Bin <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
#wieloklasowa
X <- df_multi[,1:4]
y_tar <- df_multi[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Multi <- KNNpred(KNNmodel, X)
#KNN_Ocena_Multi <- ModelOcena(y_tar, as.numeric(KNNpredict_Multi$Klasa))
#regresja
X <- df_reg[,1:4]
y_tar <- df_reg[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Reg <- KNNpred(KNNmodel, X)
KNN_Ocena_Reg <- as.data.frame(ModelOcena(y_tar, KNNpredict_Reg))
View(KNN_Ocena_Reg)
KNN_Ocena_Reg <- ModelOcena(y_tar, KNNpredict_Reg)
print(KNN_Ocena_Reg)
#binarna
SVM_model <- trainSVM(df_bin_norm[,1:4], df_bin_norm[,5], C=10, lr = 0.001, maxiter = 500)
View(df_bin_norm)
#binarna
SVM_model <- trainSVM(df_bin_norm[,1:4], as.factor(df_bin_norm[,5]), C=10, lr = 0.001, maxiter = 500)
#binarna
SVM_model <- trainSVM(df_bin_norm[,1:5], as.factor(df_bin_norm[,6]), C=10, lr = 0.001, maxiter = 500)
View(df_bin)
#binarna
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin[,6], C=10, lr = 0.001, maxiter = 500)
#binarna
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin_norm[,6], C=10, lr = 0.001, maxiter = 500)
View(SVM_model)
#binarna
SVM_model <- trainSVM(df_bin_norm[,1:5], df_bin_norm[,6], C=10, lr = 0.001, maxiter = 500)
#binarna
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin_norm[,6], C=10, lr = 0.001, maxiter = 500)
SVMpredict_Bin <- predSVM(as.matrix(df_bin_norm[,1:5]), SVM_model$Theta, SVM_model$Theta0)
SVMpredict_Bin <- predSVM(as.matrix(df_bin_norm[,1:5]), SVM_model$Theta, SVM_model$Theta0)
SVM_Ocena_Bin <- ModelOcena(df_bin_norm[,6], SVMpredict_Bin)
#binarna
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin[,6], C=10, lr = 0.001, maxiter = 500)
SVM_Ocena_Bin <- ModelOcena(df_bin[,6], SVMpredict_Bin)
test <- attr(SVMpredict_Bin, "probabilities")[,1]
test <- attr(SVMpredict_Bin, "probabilities")
#binarna
df_bin_sign <- ifelse( df_bin[,6] == 0, -1, df_bin[,6])
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin_sign, C=10, lr = 0.001, maxiter = 500)
SVMpredict_Bin <- predSVM(as.matrix(df_bin_norm[,1:5]), SVM_model$Theta, SVM_model$Theta0)
SVM_Ocena_Bin <- ModelOcena(df_bin_sign, SVMpredict_Bin)
#binarna
df_bin_sign <- as.factor(ifelse( df_bin[,6] == 0, -1, df_bin[,6]))
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin_sign, C=10, lr = 0.001, maxiter = 500)
SVMpredict_Bin <- predSVM(as.matrix(df_bin_norm[,1:5]), SVM_model$Theta, SVM_model$Theta0)
SVM_Ocena_Bin <- ModelOcena(df_bin_sign, SVMpredict_Bin)
#binarna
df_bin_sign <- ifelse( df_bin[,6] == 0, -1, df_bin[,6])
SVM_model <- trainSVM(as.matrix(df_bin_norm[,1:5]), df_bin_sign, C=10, lr = 0.001, maxiter = 500)
SVMpredict_Bin <- predSVM(as.matrix(df_bin_norm[,1:5]), SVM_model$Theta, SVM_model$Theta0)
SVM_Ocena_Bin <- ModelOcena(df_bin_sign, SVMpredict_Bin)
SVM_Ocena_Bin <- ModelOcena(as.factor(df_bin_sign), SVMpredict_Bin)
rm(list=ls())
source("funkcje.R")
#dane do klasyfikacji binarnej
df_bin <- read.csv("caesarian.csv",header=T, sep=",")
df_bin[,6] = as.factor(df_bin[,6])
X_nazwy_bin = colnames(df_bin)[1:5]
#X_bin = df_bin[,1:5]
class(df_bin)
class(df_bin[,6])
#dane do klasyfikacji wieloklasowej
df_multi <- read.csv("balance.csv",header=T, sep=",")
df_multi = as.data.frame(cbind(df_multi[,2:5], Class.Name = df_multi$Class.Name))
df_multi$Class.Name <- as.factor(as.numeric(df_multi$Class.Name))
X_nazwy_multi = colnames(df_multi)[1:4]
class(df_multi)
class(df_multi[,5])
#dane do regresji
df_reg <- read.csv("servo.csv",header=T, sep=",")
df_reg$motor <- as.numeric(df_reg$motor)
df_reg$screw <- as.numeric(df_reg$screw)
X_nazwy_reg = colnames(df_reg)[1:4]
class(df_reg)
class(df_reg[,5])
#X_reg = df_reg[,1:4]
#Y_reg = df_reg[,5]
df_bin_norm <- as.data.frame(cbind(sapply(df_bin[,1:5],norm_0_1), Caesarian = df_bin$Caesarian))
df_multi_norm <- as.data.frame(cbind(sapply(df_multi[,1:4],norm_0_1), Class.Name = df_multi$Class.Name))
df_reg_norm <- as.data.frame(cbind(sapply(df_reg[,1:4],norm_0_1), class = df_reg$class))
#binarna
Drzewko_bin <- Tree("Caesarian", X_nazwy_bin, data=df_bin, type='Gini', depth=2, minobs=2, overfit='none', cf=0.001)
#wieloklasowa
Drzewko_multi <- Tree("Y_multi", X_nazwy_multi, data=df_multi, type='Gini', depth=6, minobs=2, overfit='none', cf=0.001)        ### <<<--- COS NIE TAK Z TYM DRZEWEM --- ###
#regresja -
Drzewko_reg <- Tree("class", X_nazwy_reg, data=df_reg, type='SS', depth=9, minobs=2, overfit='none', cf=0.001)
X <- df_bin[,1:5]
y_tar <- df_bin[,6]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Bin <- KNNpred(KNNmodel, X)
KNN_Ocena_Bin <- ModelOcena(y_tar, as.numeric(KNNpredict_Bin[,1]))
#wieloklasowa
X <- df_multi[,1:4]
y_tar <- df_multi[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Multi <- KNNpred(KNNmodel, X)
#KNN_Ocena_Multi <- ModelOcena(y_tar, as.numeric(KNNpredict_Multi$Klasa))                                                       ### <<<--- Ocena dla klasyfikacji MULTI --- ###
#regresja
X <- df_reg[,1:4]
y_tar <- df_reg[,5]
KNNmodel <- KNNtrain( X, y_tar, k = 5, 0,1 )
KNNpredict_Reg <- KNNpred(KNNmodel, X)
KNN_Ocena_Reg <- ModelOcena(y_tar, KNNpredict_Reg)
print(KNN_Ocena_Reg)
df_bin_sign <- ifelse( df_bin[,6] == 0, -1, df_bin[,6])
View(df_bin)
View(df_bin_norm)
View(df_bin)
#binarna
df_bin_sign <- ifelse( df_bin[,6] == 0, -1, df_bin[,6])

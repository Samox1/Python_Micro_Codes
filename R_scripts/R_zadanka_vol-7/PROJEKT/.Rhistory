hiper_parametry_NN_reg <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.01), iter = c(20000))
Kroswalidacja_NN_reg <- CrossValidTune(data_regresja, data_regresja_X, data_regresja_Y, kFold = 8, hiper_parametry_NN_reg, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_reg)
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(1.0), iter = c(2000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(1.0), iter = c(2000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
source("funkcje_SZYBKIE.R")
print("Sieci NN - multi")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(1.0), iter = c(2000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
warnings()
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_bin <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.01), iter = c(1000))
Kroswalidacja_NN_bin <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, hiper_parametry_NN_bin, algorytm="NN", seed = 614)
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
warni
warnings()
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.00001), iter = c(1000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.001), iter = c(30000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.01), iter = c(20000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
source("funkcje_SZYBKIE.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.01), iter = c(20000))
Kroswalidacja_NN_multi <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, hiper_parametry_NN_multi, algorytm="NN", seed = 614)
print(Kroswalidacja_NN_multi)
Kroswalidacja_NN_multi_TABELA <- Kroswalidacja_NN_multi
Kroswalidacja_NN_multi_TABELA[is.na(Kroswalidacja_NN_multi_TABELA)] <- 0.0
Kroswalidacja_NN_multi_TABELA$h <- as.character(Kroswalidacja_NN_multi_TABELA$h)
Kroswalidacja_NN_multi_TABELA$h <- str_remove(Kroswalidacja_NN_multi_TABELA$h, pattern = "c")
Kroswalidacja_NN_multi_TABELA_grupowana <- as.data.frame(Kroswalidacja_NN_multi_TABELA
%>% group_by( h, lr, iter)
%>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
Kroswalidacja_NN_multi_najlepsze_T <- Kroswalidacja_NN_multi_TABELA_grupowana[which.max(Kroswalidacja_NN_multi_TABELA_grupowana$ACCT),]
Kroswalidacja_NN_multi_najlepsze_W <- Kroswalidacja_NN_multi_TABELA_grupowana[which.max(Kroswalidacja_NN_multi_TABELA_grupowana$ACCW),]
print(Kroswalidacja_NN_multi_TABELA_grupowana)
print(Kroswalidacja_NN_multi_najlepsze_T)
print(Kroswalidacja_NN_multi_najlepsze_W)
ggplot(Kroswalidacja_NN_multi_TABELA_grupowana , aes(x=c(1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana)), size = 1)) +
geom_line(aes(y = ACCT, color = 'blue'), size=1,) +
geom_line(aes(y = ACCW, color = 'red'), size=1,) +
labs(title='Sieci Neuronowe - klasyfikacja wieloklasowa', x='Nr modelu', y='Jakosc') +
scale_color_discrete(name = "Wyniki: ", labels = c("Jakosc_Trening", "Jakosc_Walidacja")) + theme(legend.position = "bottom")
save(hiper_parametry_NN_multi, Kroswalidacja_NN_multi, Kroswalidacja_NN_multi_TABELA_grupowana, file = '8_NN_MULTI.RData')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"])
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', xlab = "Model", ylab = "Dokladnosc")
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', xlab = "Model no.", ylab = "Dokladnosc")
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,c("ACCT","ACCW")], type = 'l', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.5,1))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.6,0.8))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.6,0.8))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l', col='blue')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.65,0.75))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l', col='blue')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.68,0.72))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'l', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), cex=0.8)
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'l', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.68,0.72))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.68,0.72))
lines(x = 1:nrow(Kroswalidacja_NN_multi_TABELA_grupowana), y = Kroswalidacja_NN_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_NN_reg_TABELA_grupowana), y = Kroswalidacja_NN_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE")
lines(x = 1:nrow(Kroswalidacja_NN_reg_TABELA_grupowana), y = Kroswalidacja_NN_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
Kroswalidacja_NN_reg_TABELA_grupowana
plot(x = 1:nrow(Kroswalidacja_NN_reg_TABELA_grupowana), y = Kroswalidacja_NN_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE", ylim = c(0.3, 0.52))
lines(x = 1:nrow(Kroswalidacja_NN_reg_TABELA_grupowana), y = Kroswalidacja_NN_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_Tree_reg_TABELA_grupowana), y = Kroswalidacja_Tree_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE", ylim = c(0.3, 0.52))
lines(x = 1:nrow(Kroswalidacja_Tree_reg_TABELA_grupowana), y = Kroswalidacja_Tree_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
Kroswalidacja_Tree_reg_TABELA_grupowana
plot(x = 1:nrow(Kroswalidacja_Tree_reg_TABELA_grupowana), y = Kroswalidacja_Tree_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE", ylim = c(0.18, 0.37))
lines(x = 1:nrow(Kroswalidacja_Tree_reg_TABELA_grupowana), y = Kroswalidacja_Tree_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_Tree_multi_TABELA_grupowana), y = Kroswalidacja_Tree_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.68,0.72))
lines(x = 1:nrow(Kroswalidacja_Tree_multi_TABELA_grupowana), y = Kroswalidacja_Tree_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_Tree_multi_TABELA_grupowana), y = Kroswalidacja_Tree_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = 1:nrow(Kroswalidacja_Tree_multi_TABELA_grupowana), y = Kroswalidacja_Tree_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_KNN_reg_TABELA_grupowana), y = Kroswalidacja_KNN_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE")
lines(x = 1:nrow(Kroswalidacja_KNN_reg_TABELA_grupowana), y = Kroswalidacja_KNN_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
plot(x = 1:nrow(Kroswalidacja_KNN_reg_TABELA_grupowana), y = Kroswalidacja_KNN_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE", ylim = c(0.18, 0.55))
lines(x = 1:nrow(Kroswalidacja_KNN_reg_TABELA_grupowana), y = Kroswalidacja_KNN_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = Kroswalidacja_KNN_reg_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_reg_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Parametr 'k' ", ylab = "MAE", ylim = c(0.18, 0.55))
lines(x = Kroswalidacja_KNN_reg_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_reg_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
Kroswalidacja_KNN_multi
plot(x = Kroswalidacja_KNN_reg_TABELA_grupowana[,"k"], y = Kroswalidacja_Tree_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
plot(x = Kroswalidacja_KNN_multi_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = Kroswalidacja_KNN_multi_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
print(Kroswalidacja_KNN_multi_TABELA_grupowana)
plot(x = Kroswalidacja_KNN_multi_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.82, 0.93))
lines(x = Kroswalidacja_KNN_multi_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
Kroswalidacja_Tree_reg
Kroswalidacja_Tree_multi
is.na(Kroswalidacja_Tree_multi_TABELA)
anyNA(Kroswalidacja_Tree_multi_TABELA)
save.image('WSZYSTKO.RData')
load('1_KNN_BIN.RData')
View(Kroswalidacja_KNN_bin_TABELA_grupowana)
plot(x = Kroswalidacja_KNN_multi_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_multi_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Parametr 'k'", ylab = "Dokladnosc", ylim = c(0.82, 0.93))
lines(x = Kroswalidacja_KNN_multi_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_multi_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = Kroswalidacja_KNN_bin_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_bin_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Parametr 'k'", ylab = "Dokladnosc")
lines(x = Kroswalidacja_KNN_bin_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_bin_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
print(Kroswalidacja_KNN_bin_TABELA_grupowana)
# Drzewa Decyzyjne
load('4_TREE_BIN.RData')
Kroswalidacja_Tree_bin
print(Kroswalidacja_Tree_bin_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_bin_TABELA_grupowana), y = Kroswalidacja_Tree_bin_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = 1:nrow(Kroswalidacja_Tree_bin_TABELA_grupowana), y = Kroswalidacja_Tree_bin_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_Tree_bin_TABELA_grupowana), y = Kroswalidacja_Tree_bin_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_bin_TABELA_grupowana), y = Kroswalidacja_Tree_bin_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
# Sieci Neuronowe
load('7_NN_BIN.RData')
Kroswalidacja_NN_bin
Kroswalidacja_NN_bin_TABELA <- Kroswalidacja_NN_bin
Kroswalidacja_NN_bin_TABELA[is.na(Kroswalidacja_NN_bin_TABELA)] <- 0.0
Kroswalidacja_NN_bin_TABELA$h <- as.character(Kroswalidacja_NN_bin_TABELA$h)
Kroswalidacja_NN_bin_TABELA$h <- str_remove(Kroswalidacja_NN_bin_TABELA$h, pattern = "c")
Kroswalidacja_NN_bin_TABELA_grupowana <- as.data.frame(Kroswalidacja_NN_bin_TABELA %>% group_by( h, lr, iter) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_NN_bin_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
plot(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
print(Kroswalidacja_NN_bin_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.32, 0.72))
lines(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
plot(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.32, 0.75))
lines(x = 1:nrow(Kroswalidacja_NN_bin_TABELA_grupowana), y = Kroswalidacja_NN_bin_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
View(hiper_parametry_NN_bin)
8e-04
save.image('WSZYSTKO_2.RData')
# Klasyfikacja Binarna - Banknote Authentication
data_klasyfikacja_binarna <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt", header = FALSE)
summary(data_klasyfikacja_binarna)
data_klasyfikacja_binarna[,1] <- as.numeric(as.factor(data_klasyfikacja_binarna[,1]))
data_klasyfikacja_binarna[,2] <- as.numeric(as.factor(data_klasyfikacja_binarna[,2]))
data_klasyfikacja_binarna[,5] <- as.factor(data_klasyfikacja_binarna[,5])
data_klasyfikacja_binarna_X <- colnames(data_klasyfikacja_binarna)[-5]
data_klasyfikacja_binarna_Y <- 'V5'
summary(data_klasyfikacja_binarna)
# Klasyfikacja Binarna - Banknote Authentication
data_klasyfikacja_binarna <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt", header = FALSE)
summary(data_klasyfikacja_binarna)
data_klasyfikacja_binarna[,1] <- as.numeric(as.factor(data_klasyfikacja_binarna[,1]))
data_klasyfikacja_binarna[,2] <- as.numeric(as.factor(data_klasyfikacja_binarna[,2]))
data_klasyfikacja_binarna[,5] <- as.factor(data_klasyfikacja_binarna[,5])
data_klasyfikacja_binarna_X <- colnames(data_klasyfikacja_binarna)[-5]
data_klasyfikacja_binarna_Y <- 'V5'
summary(data_klasyfikacja_binarna)
# Klasyfikacja Binarna - Banknote Authentication
data_klasyfikacja_binarna <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt", header = FALSE)
summary(data_klasyfikacja_binarna)
# data_klasyfikacja_binarna[,1] <- as.numeric(as.factor(data_klasyfikacja_binarna[,1]))
# data_klasyfikacja_binarna[,2] <- as.numeric(as.factor(data_klasyfikacja_binarna[,2]))
data_klasyfikacja_binarna[,5] <- as.factor(data_klasyfikacja_binarna[,5])
data_klasyfikacja_binarna_X <- colnames(data_klasyfikacja_binarna)[-5]
data_klasyfikacja_binarna_Y <- 'V5'
summary(data_klasyfikacja_binarna)
# Klasyfikacja Wieloklasowa - Car
data_klasyfikacja_wieloklasowa <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data", header = FALSE)
summary(data_klasyfikacja_wieloklasowa)
data_klasyfikacja_wieloklasowa[,1] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,1]))
data_klasyfikacja_wieloklasowa[,2] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,2]))
data_klasyfikacja_wieloklasowa[,3] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,3]))
data_klasyfikacja_wieloklasowa[,4] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,4]))
data_klasyfikacja_wieloklasowa[,5] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,5]))
data_klasyfikacja_wieloklasowa[,6] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,6]))
data_klasyfikacja_wieloklasowa_X <- colnames(data_klasyfikacja_wieloklasowa)[-7]
data_klasyfikacja_wieloklasowa_Y <- 'V7'
summary(data_klasyfikacja_wieloklasowa)
# Regresja - Servo
data_regresja <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/servo/servo.data", header = FALSE)
summary(data_regresja)
data_regresja[,1] <- as.numeric(as.factor(data_regresja[,1]))
data_regresja[,2] <- as.numeric(as.factor(data_regresja[,2]))
data_regresja_X <- colnames(data_regresja)[-5]
data_regresja_Y <- 'V5'
summary(data_regresja)
print(Kroswalidacja_Tree_reg_TABELA_grupowana)
Tree_reg_przyklad <- Tree(Y = data_regresja_Y, X = data_regresja_X, data = data_regresja, type = 'SS', depth = 7, minobs = 3, overfit = 'none', cf = 0.01)
plot(Tree_reg_przyklad)
print(Tree_reg_przyklad)
print(Kroswalidacja_Tree_multi_TABELA_grupowana)
Tree_multi_przyklad <- Tree(Y = data_klasyfikacja_wieloklasowa_Y, X = data_klasyfikacja_wieloklasowa_X, data = data_klasyfikacja_wieloklasowa, type = 'Gini', depth = 7, minobs = 6, overfit = 'prune', cf = 0.25)
print(Tree_multi_przyklad)
plot(Tree_multi_przyklad)
print(Kroswalidacja_NN_reg_TABELA_grupowana)
source("funkcje_SZYBKIE.R")
dane_regresja_norm <- MinMax(dane_regresja)
data_regresja_norm <- MinMax(data_regresja)
View(data_regresja_norm)
summary(data_regresja_norm)
data_regresja_norm <- data.frame(sapply(data_regresja, MinMax))
summary(data_regresja_norm)
print(Kroswalidacja_NN_reg_TABELA_grupowana)
NN_reg_przyklad <- trainNN(x = data_regresja_norm[,data_regresja_X], y_tar = data_regresja_norm[,data_regresja_Y], h = c(5,7), lr = 0.01, iter = 20000, seed = 614, typ = 'reg')
NN_reg_przyklad <- trainNN(x = as.matrix(data_regresja_norm[,data_regresja_X]), y_tar = as.matrix(data_regresja_norm[,data_regresja_Y]), h = c(5,7), lr = 0.01, iter = 20000, seed = 614, typ = 'reg')
summary(data_klasyfikacja_binarna)
summary(data_klasyfikacja_wieloklasowa)
summary(data_klasyfikacja_wieloklasowa)
summary(data_regresja)
print(Kroswalidacja_KNN_bin_TABELA_grupowana)
print(Kroswalidacja_KNN_multi_TABELA_grupowana)
print(Kroswalidacja_KNN_reg_TABELA_grupowana)
R_GRID_KNN_bin = expand.grid(k=2:12)
R_CV_KNN_binarna = train(x=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_X], y=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_Y], tuneGrid=R_GRID_KNN_bin, method='knn', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_KNN_binarna_Wynik = R_CV_KNN_binarna$results
print(paste("KNN w R - klasyfikacja binarna: k = ", R_CV_KNN_binarna$finalModel$k, " | Dokladnosc = " ,R_CV_KNN_binarna_Wynik$Accuracy[R_CV_KNN_binarna_Wynik$k == R_CV_KNN_binarna$finalModel$k]))
R_GRID_KNN_multi = expand.grid(k=2:12)
R_CV_KNN_wieloklasowa = train(x=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_X], y=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_Y], tuneGrid=R_GRID_KNN_multi, method='knn', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_KNN_wieloklasowa_Wynik = R_CV_KNN_wieloklasowa$results
print(paste("KNN w R - klasyfikacja wieloklasowa: k = ", R_CV_KNN_wieloklasowa$finalModel$k, " | Dokladnosc = " ,R_CV_KNN_wieloklasowa_Wynik$Accuracy[R_CV_KNN_wieloklasowa_Wynik$k == R_CV_KNN_wieloklasowa$finalModel$k]))
R_GRID_KNN_reg = expand.grid(k=2:12)
R_CV_KNN_regresja = train(x=data_regresja[,data_regresja_X], y=data_regresja[,data_regresja_Y], tuneGrid=R_GRID_KNN_reg, method='knn', metric='MAE', trControl=kontrola_kroswalidacji)
R_CV_KNN_regresja_Wynik = R_CV_KNN_regresja$results
print(paste("KNN w R - regresja: k = ", R_CV_KNN_regresja$finalModel$k, " | MAE = " ,R_CV_KNN_regresja_Wynik$MAE[R_CV_KNN_regresja_Wynik$k == R_CV_KNN_regresja$finalModel$k]))
kontrola_kroswalidacji <- trainControl(method="cv", number = 8)
R_GRID_KNN_bin = expand.grid(k=2:12)
R_CV_KNN_binarna = train(x=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_X], y=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_Y], tuneGrid=R_GRID_KNN_bin, method='knn', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_KNN_binarna_Wynik = R_CV_KNN_binarna$results
print(paste("KNN w R - klasyfikacja binarna: k = ", R_CV_KNN_binarna$finalModel$k, " | Dokladnosc = " ,R_CV_KNN_binarna_Wynik$Accuracy[R_CV_KNN_binarna_Wynik$k == R_CV_KNN_binarna$finalModel$k]))
R_GRID_KNN_multi = expand.grid(k=2:12)
R_CV_KNN_wieloklasowa = train(x=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_X], y=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_Y], tuneGrid=R_GRID_KNN_multi, method='knn', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_KNN_wieloklasowa_Wynik = R_CV_KNN_wieloklasowa$results
print(paste("KNN w R - klasyfikacja wieloklasowa: k = ", R_CV_KNN_wieloklasowa$finalModel$k, " | Dokladnosc = " ,R_CV_KNN_wieloklasowa_Wynik$Accuracy[R_CV_KNN_wieloklasowa_Wynik$k == R_CV_KNN_wieloklasowa$finalModel$k]))
R_GRID_KNN_reg = expand.grid(k=2:12)
R_CV_KNN_regresja = train(x=data_regresja[,data_regresja_X], y=data_regresja[,data_regresja_Y], tuneGrid=R_GRID_KNN_reg, method='knn', metric='MAE', trControl=kontrola_kroswalidacji)
R_CV_KNN_regresja_Wynik = R_CV_KNN_regresja$results
print(paste("KNN w R - regresja: k = ", R_CV_KNN_regresja$finalModel$k, " | MAE = " ,R_CV_KNN_regresja_Wynik$MAE[R_CV_KNN_regresja_Wynik$k == R_CV_KNN_regresja$finalModel$k]))
print(Kroswalidacja_Tree_bin_TABELA_grupowana)
print(Kroswalidacja_Tree_multi_TABELA_grupowana)
print(Kroswalidacja_Tree_reg_TABELA_grupowana)
R_GRID_TREE_bin = expand.grid(maxdepth=2:8)
R_CV_TREE_binarna = train(x=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_X], y=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_Y], tuneGrid=R_GRID_TREE_bin, method='rpart2', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_TREE_binarna_Wynik = R_CV_TREE_binarna$results
print(paste("Drzewa Decyzyjne w R - klasyfikacja binarna: glebokosc drzewa = ", R_CV_TREE_binarna[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Dokladnosc = " , R_CV_TREE_binarna_Wynik$Accuracy[R_CV_TREE_binarna_Wynik$maxdepth == R_CV_TREE_binarna[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
R_GRID_TREE_wieloklasowa = expand.grid(maxdepth=2:8)
R_CV_TREE_wieloklasowa = train(x=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_X], y=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_Y], tuneGrid=R_GRID_TREE_wieloklasowa, method='rpart2', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_TREE_wieloklasowa_Wynik = R_CV_TREE_wieloklasowa$results
print(paste("Drzewa Decyzyjne w R - klasyfikacja wieloklasowa: glebokosc drzewa = ", R_CV_TREE_wieloklasowa[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Dokladnosc = " , R_CV_TREE_wieloklasowa_Wynik$Accuracy[R_CV_TREE_wieloklasowa_Wynik$maxdepth == R_CV_TREE_wieloklasowa[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
R_GRID_TREE_regresja = expand.grid(maxdepth=2:8)
R_CV_TREE_regresja = train(x=data_regresja[,data_regresja_X], y=data_regresja[,data_regresja_Y], tuneGrid=R_GRID_TREE_regresja, method='rpart2', metric='MAE', trControl=kontrola_kroswalidacji)
R_CV_TREE_regresja_Wynik = R_CV_TREE_regresja$results
print(paste("Drzewa Decyzyjne w R - regresja: glebokosc drzewa = ", R_CV_TREE_regresja[["finalModel"]][["tuneValue"]][["maxdepth"]], " | MAE = " , R_CV_TREE_regresja_Wynik$MAE[R_CV_TREE_regresja_Wynik$maxdepth == R_CV_TREE_regresja[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print(Kroswalidacja_NN_bin_TABELA_grupowana)
print(Kroswalidacja_NN_multi_TABELA_grupowana)
print(Kroswalidacja_NN_reg_TABELA_grupowana)
data_klasyfikacja_binarna_norm <- MinMax(data_klasyfikacja_binarna[,data_klasyfikacja_binarna_X])
R_GRID_NN_binarna = expand.grid(size=1:10, decay = c(0.001))
R_CV_NN_binarna = train(x=data_klasyfikacja_binarna_norm, y=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_Y], tuneGrid=R_GRID_NN_binarna, method='nnet', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_NN_binarna_Wynik = R_CV_NN_binarna$results
print(paste("Sieci Neuronowe w R - klasyfikacja binarna: size = ", R_CV_NN_binarna[["finalModel"]][["tuneValue"]][["size"]], " | Dokladnosc = " , R_CV_NN_binarna_Wynik$Accuracy[R_CV_NN_binarna_Wynik$size == R_CV_NN_binarna[["finalModel"]][["tuneValue"]][["size"]]]))
data_klasyfikacja_wieloklasowa_norm <- MinMax(data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_X])
R_GRID_NN_wieloklasowa = expand.grid(size=1:10, decay = c(0.001))
R_CV_NN_wieloklasowa = train(x=data_klasyfikacja_wieloklasowa_norm, y=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_Y], tuneGrid=R_GRID_NN_wieloklasowa, method='nnet', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_NN_wieloklasowa_Wynik = R_CV_NN_wieloklasowa$results
print(paste("Sieci Neuronowe w R - klasyfikacja wieloklasowa: size = ", R_CV_NN_wieloklasowa[["finalModel"]][["tuneValue"]][["size"]], " | Dokladnosc = " , R_CV_NN_wieloklasowa_Wynik$Accuracy[R_CV_NN_wieloklasowa_Wynik$size == R_CV_NN_wieloklasowa[["finalModel"]][["tuneValue"]][["size"]]]))
data_regresja_norm <- MinMax(data_regresja)
R_GRID_NN_regresja = expand.grid(size=1:10, decay = c(0.001))
R_CV_NN_regresja = train(x=data_regresja_norm[,data_regresja_X], y=data_regresja_norm[,data_regresja_Y], tuneGrid=R_GRID_NN_regresja, method='nnet', metric='MAE', trControl=kontrola_kroswalidacji)
R_CV_NN_regresja_Wynik = R_CV_NN_regresja$results
print(paste("Sieci Neuronowe w R - regresja : size = ", R_CV_NN_regresja[["finalModel"]][["tuneValue"]][["size"]], " | MAE = " , R_CV_NN_regresja_Wynik$MAE[R_CV_NN_regresja_Wynik$size == R_CV_NN_regresja[["finalModel"]][["tuneValue"]][["size"]]][1]))
data_klasyfikacja_binarna_norm <- data.frame(sapply(data_klasyfikacja_binarna[,data_klasyfikacja_binarna_X], MinMax))
R_GRID_NN_binarna = expand.grid(size=1:10, decay = c(0.001))
R_CV_NN_binarna = train(x=data_klasyfikacja_binarna_norm, y=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_Y], tuneGrid=R_GRID_NN_binarna, method='nnet', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_NN_binarna_Wynik = R_CV_NN_binarna$results
print(paste("Sieci Neuronowe w R - klasyfikacja binarna: size = ", R_CV_NN_binarna[["finalModel"]][["tuneValue"]][["size"]], " | Dokladnosc = " , R_CV_NN_binarna_Wynik$Accuracy[R_CV_NN_binarna_Wynik$size == R_CV_NN_binarna[["finalModel"]][["tuneValue"]][["size"]]]))
data_klasyfikacja_wieloklasowa_norm <- data.frame(sapply(data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_X], MinMax))
R_GRID_NN_wieloklasowa = expand.grid(size=1:10, decay = c(0.001))
R_CV_NN_wieloklasowa = train(x=data_klasyfikacja_wieloklasowa_norm, y=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_Y], tuneGrid=R_GRID_NN_wieloklasowa, method='nnet', metric='Accuracy', trControl=kontrola_kroswalidacji)
R_CV_NN_wieloklasowa_Wynik = R_CV_NN_wieloklasowa$results
print(paste("Sieci Neuronowe w R - klasyfikacja wieloklasowa: size = ", R_CV_NN_wieloklasowa[["finalModel"]][["tuneValue"]][["size"]], " | Dokladnosc = " , R_CV_NN_wieloklasowa_Wynik$Accuracy[R_CV_NN_wieloklasowa_Wynik$size == R_CV_NN_wieloklasowa[["finalModel"]][["tuneValue"]][["size"]]]))
data_regresja_norm <- data.frame(sapply(data_regresja, MinMax))
R_GRID_NN_regresja = expand.grid(size=1:10, decay = c(0.001))
R_CV_NN_regresja = train(x=data_regresja_norm[,data_regresja_X], y=data_regresja_norm[,data_regresja_Y], tuneGrid=R_GRID_NN_regresja, method='nnet', metric='MAE', trControl=kontrola_kroswalidacji)
R_CV_NN_regresja_Wynik = R_CV_NN_regresja$results
print(paste("Sieci Neuronowe w R - regresja : size = ", R_CV_NN_regresja[["finalModel"]][["tuneValue"]][["size"]], " | MAE = " , R_CV_NN_regresja_Wynik$MAE[R_CV_NN_regresja_Wynik$size == R_CV_NN_regresja[["finalModel"]][["tuneValue"]][["size"]]][1]))
print(paste("Sieci Neuronowe w R - klasyfikacja binarna: size = ", R_CV_NN_binarna[["finalModel"]][["tuneValue"]][["size"]], " | Dokladnosc = " , R_CV_NN_binarna_Wynik$Accuracy[R_CV_NN_binarna_Wynik$size == R_CV_NN_binarna[["finalModel"]][["tuneValue"]][["size"]]]))
print(paste("Sieci Neuronowe w R - klasyfikacja wieloklasowa: size = ", R_CV_NN_wieloklasowa[["finalModel"]][["tuneValue"]][["size"]], " | Dokladnosc = " , R_CV_NN_wieloklasowa_Wynik$Accuracy[R_CV_NN_wieloklasowa_Wynik$size == R_CV_NN_wieloklasowa[["finalModel"]][["tuneValue"]][["size"]]]))
print(paste("Sieci Neuronowe w R - regresja : size = ", R_CV_NN_regresja[["finalModel"]][["tuneValue"]][["size"]], " | MAE = " , R_CV_NN_regresja_Wynik$MAE[R_CV_NN_regresja_Wynik$size == R_CV_NN_regresja[["finalModel"]][["tuneValue"]][["size"]]][1]))
View(data_klasyfikacja_binarna)
save.image('WSZYSTKO_3.RData')
library(caret)
library(rpart)
library(data.tree)
library(pROC)
library(e1071)
library(class)
library(dplyr)
source("funkcje.R")
# Klasyfikacja Binarna - Banknote Authentication
data_klasyfikacja_binarna <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00267/data_banknote_authentication.txt", header = FALSE)
summary(data_klasyfikacja_binarna)
# data_klasyfikacja_binarna[,1] <- as.numeric(as.factor(data_klasyfikacja_binarna[,1]))
# data_klasyfikacja_binarna[,2] <- as.numeric(as.factor(data_klasyfikacja_binarna[,2]))
data_klasyfikacja_binarna[,5] <- as.factor(data_klasyfikacja_binarna[,5])
data_klasyfikacja_binarna_X <- colnames(data_klasyfikacja_binarna)[-5]
data_klasyfikacja_binarna_Y <- 'V5'
summary(data_klasyfikacja_binarna)
# Klasyfikacja Wieloklasowa - Car
data_klasyfikacja_wieloklasowa <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/car/car.data", header = FALSE)
summary(data_klasyfikacja_wieloklasowa)
data_klasyfikacja_wieloklasowa[,1] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,1]))
data_klasyfikacja_wieloklasowa[,2] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,2]))
data_klasyfikacja_wieloklasowa[,3] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,3]))
data_klasyfikacja_wieloklasowa[,4] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,4]))
data_klasyfikacja_wieloklasowa[,5] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,5]))
data_klasyfikacja_wieloklasowa[,6] <- as.numeric(as.factor(data_klasyfikacja_wieloklasowa[,6]))
data_klasyfikacja_wieloklasowa_X <- colnames(data_klasyfikacja_wieloklasowa)[-7]
data_klasyfikacja_wieloklasowa_Y <- 'V7'
summary(data_klasyfikacja_wieloklasowa)
# Regresja - Servo
data_regresja <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/servo/servo.data", header = FALSE)
summary(data_regresja)
data_regresja[,1] <- as.numeric(as.factor(data_regresja[,1]))
data_regresja[,2] <- as.numeric(as.factor(data_regresja[,2]))
data_regresja_X <- colnames(data_regresja)[-5]
data_regresja_Y <- 'V5'
summary(data_regresja)
kroswalidacja_train <- trainControl(method="cv", number = 8)
param_KNN_klasyfikacja_binarna <- expand.grid(k=c(2,4,6,8,10,12))
Kroswalidacja_KNN_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_KNN_klasyfikacja_binarna, algorytm="KNN", seed = 614)
Kroswalidacja_KNN_klasyfikacja_binarna_TABELA <- Kroswalidacja_KNN_klasyfikacja_binarna
Kroswalidacja_KNN_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_KNN_klasyfikacja_binarna_TABELA %>% group_by(k) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_KNN_klasyfikacja_binarna_TABELA_grupowana)
plot(x = Kroswalidacja_KNN_klasyfikacja_binarna_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Parametr 'k'", ylab = "Dokladnosc")
lines(x = Kroswalidacja_KNN_klasyfikacja_binarna_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
param_KNN_klasyfikacja_wieloklasowa <- expand.grid(k=c(2,4,6,8,10,12))
Kroswalidacja_KNN_klasyfikacja_wieloklasowa <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, param_KNN_klasyfikacja_wieloklasowa, algorytm="KNN", seed = 614)
Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA <- Kroswalidacja_KNN_klasyfikacja_wieloklasowa
Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA_grupowana <- as.data.frame(Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA %>% group_by(k) %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA_grupowana)
plot(x = Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Parametr 'k'", ylab = "Dokladnosc", ylim = c(0.82, 0.93))
lines(x = Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_klasyfikacja_wieloklasowa_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
param_KNN_regresja <- expand.grid(k=c(2,4,6,8,10,12))
Kroswalidacja_KNN_regresja <- CrossValidTune(data_regresja, data_regresja_X, data_regresja_Y, kFold = 8, param_KNN_regresja, algorytm="KNN", seed = 614)
Kroswalidacja_KNN_regresja_TABELA <- Kroswalidacja_KNN_regresja
Kroswalidacja_KNN_regresja_TABELA_grupowana <- as.data.frame(Kroswalidacja_KNN_regresja_TABELA %>% group_by(k) %>% summarise(MAET = mean(MAET), MSET = mean(MSET), MAPET = mean(MAPET), MAEW = mean(MAEW), MSEW = mean(MSEW), MAPEW = mean(MAPEW)))
print(Kroswalidacja_KNN_regresja_TABELA_grupowana)
plot(x = Kroswalidacja_KNN_regresja_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_regresja_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Parametr 'k' ", ylab = "MAE", ylim = c(0.18, 0.55))
lines(x = Kroswalidacja_KNN_regresja_TABELA_grupowana[,"k"], y = Kroswalidacja_KNN_regresja_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
R_GRID_KNN_klasyfikacja_binarna = expand.grid(k=2:12)
R_CV_KNN_binarna = train(x=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_X], y=data_klasyfikacja_binarna[,data_klasyfikacja_binarna_Y], tuneGrid=R_GRID_KNN_klasyfikacja_binarna, method='knn', metric='Accuracy', trControl=kroswalidacja_train)
R_CV_KNN_binarna_Wynik = R_CV_KNN_binarna$results
print(paste("KNN w R - klasyfikacja binarna: k = ", R_CV_KNN_binarna$finalModel$k, " | Dokladnosc = " ,R_CV_KNN_binarna_Wynik$Accuracy[R_CV_KNN_binarna_Wynik$k == R_CV_KNN_binarna$finalModel$k]))
R_GRID_KNN_klasyfikacja_wieloklasowa = expand.grid(k=2:12)
R_CV_KNN_wieloklasowa = train(x=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_X], y=data_klasyfikacja_wieloklasowa[,data_klasyfikacja_wieloklasowa_Y], tuneGrid=R_GRID_KNN_klasyfikacja_wieloklasowa, method='knn', metric='Accuracy', trControl=kroswalidacja_train)
R_CV_KNN_wieloklasowa_Wynik = R_CV_KNN_wieloklasowa$results
print(paste("KNN w R - klasyfikacja wieloklasowa: k = ", R_CV_KNN_wieloklasowa$finalModel$k, " | Dokladnosc = " ,R_CV_KNN_wieloklasowa_Wynik$Accuracy[R_CV_KNN_wieloklasowa_Wynik$k == R_CV_KNN_wieloklasowa$finalModel$k]))
R_GRID_KNN_regresja = expand.grid(k=2:12)
R_CV_KNN_regresja = train(x=data_regresja[,data_regresja_X], y=data_regresja[,data_regresja_Y], tuneGrid=R_GRID_KNN_regresja, method='knn', metric='MAE', trControl=kroswalidacja_train)
R_CV_KNN_regresja_Wynik = R_CV_KNN_regresja$results
print(paste("KNN w R - regresja: k = ", R_CV_KNN_regresja$finalModel$k, " | MAE = " ,R_CV_KNN_regresja_Wynik$MAE[R_CV_KNN_regresja_Wynik$k == R_CV_KNN_regresja$finalModel$k]))
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA <- Kroswalidacja_Tree_klasyfikacja_binarna
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
param_Tree_klasyfikacja_wieloklasowa <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_wieloklasowa <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, param_Tree_klasyfikacja_wieloklasowa, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA <- Kroswalidacja_Tree_klasyfikacja_wieloklasowa
Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
Tree_klasyfikacja_wieloklasowa_przyklad <- Tree(Y = data_klasyfikacja_wieloklasowa_Y, X = data_klasyfikacja_wieloklasowa_X, data = data_klasyfikacja_wieloklasowa, type = 'Gini', depth = 7, minobs = 6, overfit = 'prune', cf = 0.25)
plot(Tree_klasyfikacja_wieloklasowa_przyklad)
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy_Tree', 'Gini_Tree'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA <- Kroswalidacja_Tree_klasyfikacja_binarna
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy_Tree', 'Gini_Tree'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA <- Kroswalidacja_Tree_klasyfikacja_binarna
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy_Tree', 'Gini_Tree'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA <- Kroswalidacja_Tree_klasyfikacja_binarna
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy_Tree', 'Gini_Tree'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA <- Kroswalidacja_Tree_klasyfikacja_binarna
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
View(param_Tree_klasyfikacja_binarna)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
source("funkcje.R")
param_Tree_klasyfikacja_binarna <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_Tree_klasyfikacja_binarna, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA <- Kroswalidacja_Tree_klasyfikacja_binarna
Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc", ylim = c(0.8, 1.0))
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_binarna_TABELA_grupowana[,"JakoscW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
param_Tree_klasyfikacja_wieloklasowa <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.25))
Kroswalidacja_Tree_klasyfikacja_wieloklasowa <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, param_Tree_klasyfikacja_wieloklasowa, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA <- Kroswalidacja_Tree_klasyfikacja_wieloklasowa
Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana[,"ACCT"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "Dokladnosc")
lines(x = 1:nrow(Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana), y = Kroswalidacja_Tree_klasyfikacja_wieloklasowa_TABELA_grupowana[,"ACCW"], type = 'b', col='blue')
legend("topleft", legend=c("Dokladnosc Trening", "Dokladnosc Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
Tree_klasyfikacja_wieloklasowa_przyklad <- Tree(Y = data_klasyfikacja_wieloklasowa_Y, X = data_klasyfikacja_wieloklasowa_X, data = data_klasyfikacja_wieloklasowa, type = 'Gini', depth = 7, minobs = 6, overfit = 'prune', cf = 0.25)
plot(Tree_klasyfikacja_wieloklasowa_przyklad)
param_Tree_regresja <- expand.grid(depth=c(4,7), minobs=c(3,6,9), type=c('SS'), overfit = c('none'), cf=c(0.25))
Kroswalidacja_Tree_regresja <- CrossValidTune(data_regresja, data_regresja_X, data_regresja_Y, kFold = 8, param_Tree_regresja, algorytm="Tree", seed = 614)
Kroswalidacja_Tree_regresja_TABELA <- Kroswalidacja_Tree_regresja
Kroswalidacja_Tree_regresja_TABELA_grupowana <- as.data.frame(Kroswalidacja_Tree_regresja_TABELA %>% group_by(depth, minobs, type, overfit, cf) %>% summarise(MAET = mean(MAET), MSET = mean(MSET), MAPET = mean(MAPET), MAEW = mean(MAEW), MSEW = mean(MSEW), MAPEW = mean(MAPEW)))
print(Kroswalidacja_Tree_regresja_TABELA_grupowana)
plot(x = 1:nrow(Kroswalidacja_Tree_regresja_TABELA_grupowana), y = Kroswalidacja_Tree_regresja_TABELA_grupowana[,"MAET"], type = 'b', col='red', xlab = "Model (nr z tabeli)", ylab = "MAE", ylim = c(0.18, 0.37))
lines(x = 1:nrow(Kroswalidacja_Tree_regresja_TABELA_grupowana), y = Kroswalidacja_Tree_regresja_TABELA_grupowana[,"MAEW"], type = 'b', col='blue')
legend("topleft", legend=c("MAE Trening", "MAE Walidacja"), col=c("red", "blue"), lty = 1:2, cex=0.8)
param_NN_klasyfikacja_binarna <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.0008), iter = c(3000))
Kroswalidacja_NN_klasyfikacja_binarna <- CrossValidTune(data_klasyfikacja_binarna, data_klasyfikacja_binarna_X, data_klasyfikacja_binarna_Y, kFold = 8, param_NN_klasyfikacja_binarna, algorytm="NN", seed = 614)
Kroswalidacja_NN_klasyfikacja_binarna_TABELA <- Kroswalidacja_NN_klasyfikacja_binarna
param_NN_klasyfikacja_wieloklasowa <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.01), iter = c(20000))
Kroswalidacja_NN_klasyfikacja_wieloklasowa <- CrossValidTune(data_klasyfikacja_wieloklasowa, data_klasyfikacja_wieloklasowa_X, data_klasyfikacja_wieloklasowa_Y, kFold = 8, param_NN_klasyfikacja_wieloklasowa, algorytm="NN", seed = 614)
Kroswalidacja_NN_klasyfikacja_wieloklasowa_TABELA <- Kroswalidacja_NN_klasyfikacja_wieloklasowa
param_NN_regresja <- expand.grid(h=list(c(2,10), c(3,9), c(4,8), c(5,7), c(6,6)), lr = c(0.01), iter = c(20000))
Kroswalidacja_NN_regresja <- CrossValidTune(data_regresja, data_regresja_X, data_regresja_Y, kFold = 8, param_NN_regresja, algorytm="NN", seed = 614)
Kroswalidacja_NN_regresja_TABELA <- Kroswalidacja_NN_regresja

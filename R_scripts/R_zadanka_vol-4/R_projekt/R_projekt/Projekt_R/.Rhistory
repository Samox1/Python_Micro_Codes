NN_multi_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(multi_iter_1)), multi_iter_1, "JakoscW_2" = multi_iter_2$JakoscW)
NN_multi_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(multi_iter_1)), multi_iter_1, "ACCW_2" = multi_iter_2$ACCW)
NN_multi_Porownanie_iter
ggplot(NN_multi_Porownanie_iter , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_2, color='red'), size=1,) +
labs(title='Sieci Neuronowe - Klas. Wieloklasowa - porownanie wynikow dla roznych ITER i modeli', x='Wariant warstw', y='Accuracy') +
scale_color_discrete(name = "Iter", labels = c(as.character(unique(NN_multi_CrossValid_gr_iter$iter)[1]), as.character(unique(NN_multi_CrossValid_gr_iter$iter)[2]))) +
theme(legend.position = "bottom")
ggplot(NN_multi_Porownanie_iter , aes(x=nr_wariantu)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_2, color='red'), size=1,) +
labs(title='Sieci Neuronowe - Klas. Wieloklasowa - porownanie wynikow dla roznych ITER i modeli', x='Wariant warstw', y='Accuracy') +
scale_color_discrete(name = "Iter", labels = c(as.character(unique(NN_multi_CrossValid_gr_iter$iter)[1]), as.character(unique(NN_multi_CrossValid_gr_iter$iter)[2]))) +
theme(legend.position = "bottom")
# Zaleznosc parametru ITER i kombinacji neuronow w warstwach
NN_reg_CrossValid_gr_iter <- NN_reg_CrossValid_wynik %>% group_by(h, iter)
NN_reg_CrossValid_gr_iter <- as.data.frame(NN_reg_CrossValid_gr_iter %>% summarise(MAET = mean(MAET), MAEW = mean(MAEW)))
print(NN_reg_CrossValid_gr_iter)
reg_iter_1 <- NN_reg_CrossValid_gr_iter[NN_reg_CrossValid_gr_iter$iter == unique(NN_reg_CrossValid_gr_iter$iter)[1], c("h", "MAEW")]
reg_iter_2 <- NN_reg_CrossValid_gr_iter[NN_reg_CrossValid_gr_iter$iter == unique(NN_reg_CrossValid_gr_iter$iter)[2], c("h", "MAEW")]
NN_reg_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(reg_iter_1)), reg_iter_1, "MAEW_2" = reg_iter_2$ACCW)
reg_iter_1 <- NN_reg_CrossValid_gr_iter[NN_reg_CrossValid_gr_iter$iter == unique(NN_reg_CrossValid_gr_iter$iter)[1], c("h", "MAEW")]
reg_iter_2 <- NN_reg_CrossValid_gr_iter[NN_reg_CrossValid_gr_iter$iter == unique(NN_reg_CrossValid_gr_iter$iter)[2], c("h", "MAEW")]
NN_reg_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(reg_iter_1)), reg_iter_1, "MAEW_2" = reg_iter_2$MAEW)
NN_reg_Porownanie_iter
ggplot(NN_reg_Porownanie_iter , aes(x=nr_wariantu)) +
geom_line(aes(y = MAEW, color='blue'), size=1, ) +
geom_line(aes(y = MAEW_2, color='red'), size=1,) +
labs(title='Sieci Neuronowe - Regresja - porownanie wynikow dla roznych ITER i modeli', x='Wariant warstw', y='MAE') +
scale_color_discrete(name = "Iter", labels = c(as.character(unique(NN_reg_CrossValid_gr_iter$iter)[1]), as.character(unique(NN_reg_CrossValid_gr_iter$iter)[2]))) +
theme(legend.position = "bottom")
print(KNN_bin_best_W)
print(KNN_multi_best_W)
print(KNN_reg_best_W)
print(Tree_bin_best_W)
print(Tree_multi_best_W)
print(Tree_reg_best_W)
print(NN_bin_best_W)
# Klasyfikacja BINARNA - Porownanie
print(KNN_bin_best_W)
print(Tree_bin_best_W)
print(NN_bin_best_W)
print(paste("Najlepszy KNN w R - Binarny: k = ", KNN_bin_R$finalModel$k, " | Accuracy = " ,KNN_bin_R_Wynik$Accuracy[KNN_bin_R_Wynik$k == KNN_bin_R$finalModel$k]))
print(paste("Najlepszy Tree w R - Binarny: Max Depth = ", Tree_bin_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Accuracy = " , Tree_bin_R_Wynik$Accuracy[Tree_bin_R_Wynik$maxdepth == Tree_bin_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print(paste("Najlepszy NN w R - Binarny: h = ", NN_bin_R[["finalModel"]][["tuneValue"]][["size"]], " | Accuracy = " , NN_bin_R_Wynik$Accuracy[NN_bin_R_Wynik$size == NN_bin_R[["finalModel"]][["tuneValue"]][["size"]]]))
print(paste("Najlepszy wlasny model: ",NN_bin_best_W))
print("Najlepszy wlasny model: ")
print(NN_bin_best_W)
print("*** Porownanie modeli - Klasyfikacja BINARNA ***")
print("Najlepsze KNN - wlasne: ")
print(KNN_bin_best_W)
print(paste("Najlepszy KNN w R: k = ", KNN_bin_R$finalModel$k, " | Accuracy = " ,KNN_bin_R_Wynik$Accuracy[KNN_bin_R_Wynik$k == KNN_bin_R$finalModel$k]))
print("Najlepsze Drzewo Decyzyjne - wlasne: ")
print(Tree_bin_best_W)
print(paste("Najlepszy Tree w R: Max Depth = ", Tree_bin_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Accuracy = " , Tree_bin_R_Wynik$Accuracy[Tree_bin_R_Wynik$maxdepth == Tree_bin_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print("Najlepsze NN - wlasne: ")
print(NN_bin_best_W)
print(paste("Najlepszy NN w R: h = ", NN_bin_R[["finalModel"]][["tuneValue"]][["size"]], " | Accuracy = " , NN_bin_R_Wynik$Accuracy[NN_bin_R_Wynik$size == NN_bin_R[["finalModel"]][["tuneValue"]][["size"]]]))
# Klasyfikacja MULTI - Porownanie
print("*** Porownanie modeli - Klasyfikacja MULTI ***")
print("Najlepsze KNN - wlasne: ")
print(KNN_multi_best_W)
print(paste("Najlepszy KNN w R: k = ", KNN_multi_R$finalModel$k, " | Accuracy = " ,KNN_multi_R_Wynik$Accuracy[KNN_multi_R_Wynik$k == KNN_multi_R$finalModel$k]))
print("Najlepsze Drzewo Decyzyjne - wlasne: ")
print(Tree_multi_best_W)
print(paste("Najlepszy Tree w R: Max Depth = ", Tree_multi_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Accuracy = " , Tree_multi_R_Wynik$Accuracy[Tree_multi_R_Wynik$maxdepth == Tree_multi_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print("Najlepsze NN - wlasne: ")
print(NN_multi_best_W)
print(paste("Najlepszy NN w R: h = ", NN_multi_R[["finalModel"]][["tuneValue"]][["size"]], " | Accuracy = " , NN_multi_R_Wynik$Accuracy[NN_multi_R_Wynik$size == NN_multi_R[["finalModel"]][["tuneValue"]][["size"]]]))
# Regresja - Porownanie
print("*** Porownanie modeli - Regresja ***")
print("Najlepsze KNN - wlasne: ")
print(KNN_reg_best_W)
print(paste("Najlepszy KNN w R - Regresja: k = ", KNN_reg_R$finalModel$k, " | MAE = " ,KNN_reg_R_Wynik$MAE[KNN_reg_R_Wynik$k == KNN_reg_R$finalModel$k]))
print("Najlepsze Drzewo Decyzyjne - wlasne: ")
print(Tree_reg_best_W)
print(paste("Najlepszy Tree w R - Regresja: Max Depth = ", Tree_reg_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | MAE = " , Tree_reg_R_Wynik$MAE[Tree_reg_R_Wynik$maxdepth == Tree_reg_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print("Najlepsze NN - wlasne: ")
print(NN_reg_best_W)
print(paste0("Najlepszy NN w R - Regresja: h = ", NN_reg_R[["finalModel"]][["tuneValue"]][["size"]], " | MAE = " , NN_reg_R_Wynik$MAE[NN_reg_R_Wynik$size == NN_reg_R[["finalModel"]][["tuneValue"]][["size"]]][1]))
View(KNN_bin_CrossValid_gr)
View(KNN_multi_CrossValid_gr)
(KNN_multi_CrossValid_gr)
View(KNN_reg_CrossValid_gr)
View(KNN_reg_R_Wynik)
View(NN_bin_CrossValid_gr)
View(NN_bin_CrossValid)
View(NN_bin_CrossValid_copy)
View(NN_bin_CrossValid_gr_iter)
View(NN_multi_CrossValid_gr_iter)
View(NN_multi_CrossValid_wynik_gr)
View(NN_multi_CrossValid_wynik_gr)
View(NN_reg_CrossValid_wynik_gr)
View(Tree_bin_CrossValid_gr)
View(Tree_multi_CrossValid_gr)
View(Tree_reg_CrossValid_gr)
ggplot(Porownanie_KNN_Bin , aes(x=k)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = Accuracy, color='red'), size=1,) +
labs(title='KNN - Klas. Binarna: Accuracy od k', x='k', y='Accuracy') +
scale_color_discrete(name = "Implementacja", labels = c("Wlasna", "Biblioteka R")) +
theme(legend.position = "bottom")
Porownanie_KNN_Multi <- data.frame(k = c(1:20))
Porownanie_KNN_Multi <- merge(Porownanie_KNN_Multi, KNN_multi_CrossValid_gr[,c('k', "ACCW")], by = 'k')
Porownanie_KNN_Multi <- merge(Porownanie_KNN_Multi, KNN_multi_R_Wynik[,c('k', "Accuracy")], by = 'k')
print(Porownanie_KNN_Multi)
ggplot(Porownanie_KNN_Multi , aes(x=k)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = Accuracy, color='red'), size=1,) +
labs(title='KNN - Klas. Wieloklasowa: Accuracy od k', x='k', y='Accuracy') +
scale_color_discrete(name = "Implementacja", labels = c("Wlasna", "Biblioteka R")) +
theme(legend.position = "bottom")
Porownanie_KNN_Reg <- data.frame(k = c(1:20))
Porownanie_KNN_Reg <- merge(Porownanie_KNN_Reg, KNN_reg_CrossValid_gr[,c('k', "MAEW")], by = 'k')
Porownanie_KNN_Reg <- merge(Porownanie_KNN_Reg, KNN_reg_R_Wynik[,c('k', "MAE")], by = 'k')
print(Porownanie_KNN_Reg)
ggplot(Porownanie_KNN_Reg , aes(x=k)) +
geom_line(aes(y = MAEW, color='blue'), size=1, ) +
geom_line(aes(y = MAE, color='red'), size=1,) +
labs(title='KNN - Regresja: MAE od k', x='k', y='MAE') +
scale_color_discrete(name = "Implementacja", labels = c("Wlasna", "Biblioteka R")) +
theme(legend.position = "bottom")
Tree_multi_CrossValid_gr_prune <- Tree_multi_CrossValid %>% group_by(depth, minobs, type, overfit)
Tree_multi_CrossValid_gr_prune <- as.data.frame(Tree_multi_CrossValid_gr_prune %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Tree_multi_CrossValid_gr_prune)
multi_prune_yes <- Tree_multi_CrossValid_gr_prune[Tree_multi_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs","type", "ACCW")]
multi_prune_no <- Tree_multi_CrossValid_gr_prune[Tree_multi_CrossValid_gr_prune$overfit == 'none',c("depth","minobs","type", "ACCW")]
Tree_multi_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(multi_prune_yes)), multi_prune_yes, "ACCW_none" = multi_prune_no$ACCW)
Tree_multi_Porownanie_Prune
ggplot(Tree_multi_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
Tree_multi_CrossValid_gr_type <- Tree_multi_CrossValid %>% group_by(depth, minobs, type)
Tree_multi_CrossValid_gr_type <- as.data.frame(Tree_multi_CrossValid_gr_type %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Tree_multi_CrossValid_gr_type)
multi_type_entropy <- Tree_multi_CrossValid_gr_type[Tree_multi_CrossValid_gr_type$type == 'Entropy',c("depth","minobs", "ACCW")]
multi_type_gini <- Tree_multi_CrossValid_gr_type[Tree_multi_CrossValid_gr_type$type == 'Gini',c("depth","minobs", "ACCW")]
Tree_multi_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(multi_type_entropy)), multi_type_entropy, "ACCW_gini" = multi_type_gini$ACCW)
Tree_multi_Porownanie_Prune
ggplot(Tree_multi_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_gini, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie Typu - Entropy i Gini', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Typ", labels = c("Entropy", "Gini")) +
theme(legend.position = "bottom")
Tree_multi_CrossValid_gr_wykres_minobs <- Tree_multi_CrossValid %>% group_by(depth, minobs)
Tree_multi_CrossValid_gr_wykres_minobs <- as.data.frame(Tree_multi_CrossValid_gr_wykres_minobs %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Tree_multi_CrossValid_gr_wykres_minobs)
Tree_multi_Porownanie_Minobs <- data.frame(cmultid("minobs" = Tree_multi_CrossValid_gr_wykres_minobs$minobs,
"ACCW_3" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 3, "ACCW"],
"ACCW_4" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 4, "ACCW"],
"ACCW_5" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 5, "ACCW"],
"ACCW_6" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 6, "ACCW"]))
Tree_multi_Porownanie_Minobs
ggplot(Tree_multi_Porownanie_Minobs , aes(x=minobs)) +
geom_line(aes(y = ACCW_3, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_4, color='red'), size=1,) +
geom_line(aes(y = ACCW_5, color='green'), size=1,) +
geom_line(aes(y = ACCW_6, color='black'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie MAE od MinObs dla kazdej glebokosci', x='MinObs', y='Accuracy') +
scale_color_discrete(name = "Depth", labels = c("D_3", "D_4", "D_5", "D_6")) +
theme(legend.position = "bottom")
Tree_reg_CrossValid_gr_wykres_minobs <- Tree_reg_CrossValid %>% group_by(depth, minobs)
Tree_reg_CrossValid_gr_wykres_minobs <- as.data.frame(Tree_reg_CrossValid_gr_wykres_minobs %>% summarise(MAET = mean(MAET), MAEW = mean(MAEW)))
print(Tree_reg_CrossValid_gr_wykres_minobs)
Tree_reg_Porownanie_Minobs <- data.frame(cbind("minobs" = Tree_reg_CrossValid_gr_wykres_minobs$minobs,
"MAEW_3" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 3, "MAEW"],
"MAEW_4" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 4, "MAEW"],
"MAEW_5" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 5, "MAEW"],
"MAEW_6" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 6, "MAEW"]))
Tree_reg_Porownanie_Minobs
ggplot(Tree_reg_Porownanie_Minobs , aes(x=minobs)) +
geom_line(aes(y = MAEW_3, color='blue'), size=1, ) +
geom_line(aes(y = MAEW_4, color='red'), size=1,) +
geom_line(aes(y = MAEW_5, color='green'), size=1,) +
geom_line(aes(y = MAEW_6, color='black'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie MinObs dla kazdej glebokosci', x='MinObs', y='MAE') +
scale_color_discrete(name = "Depth", labels = c("D_3", "D_4", "D_5", "D_6")) +
theme(legend.position = "bottom")
Tree_reg_CrossValid_gr_wykres_minobs <- Tree_reg_CrossValid %>% group_by(depth, minobs)
Tree_reg_CrossValid_gr_wykres_minobs <- as.data.frame(Tree_reg_CrossValid_gr_wykres_minobs %>% summarise(MAET = mean(MAET), MAEW = mean(MAEW)))
print(Tree_reg_CrossValid_gr_wykres_minobs)
Tree_reg_Porownanie_Minobs <- data.frame(cbind("minobs" = Tree_reg_CrossValid_gr_wykres_minobs$minobs,
"MAEW_3" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 3, "MAEW"],
"MAEW_4" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 4, "MAEW"],
"MAEW_5" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 5, "MAEW"],
"MAEW_6" = Tree_reg_CrossValid_gr_wykres_minobs[Tree_reg_CrossValid_gr_wykres_minobs$depth == 6, "MAEW"]))
Tree_reg_Porownanie_Minobs
ggplot(Tree_reg_Porownanie_Minobs , aes(x=minobs)) +
geom_line(aes(y = MAEW_3, color='blue'), size=1, ) +
geom_line(aes(y = MAEW_4, color='red'), size=1,) +
geom_line(aes(y = MAEW_5, color='green'), size=1,) +
geom_line(aes(y = MAEW_6, color='black'), size=1,) +
labs(title='Drzwa Decyzyjne - Regresja - porownanie MinObs dla kazdej glebokosci', x='MinObs', y='MAE') +
scale_color_discrete(name = "Depth", labels = c("D_3", "D_4", "D_5", "D_6")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_prune <- Tree_bin_CrossValid %>% group_by(depth, minobs, type, overfit)
Tree_bin_CrossValid_gr_prune <- as.data.frame(Tree_bin_CrossValid_gr_prune %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_prune)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs","type", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs","type", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
Tree_bin_Porownanie_Prune
ggplot(Tree_bin_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_type <- Tree_bin_CrossValid %>% group_by(depth, minobs, type)
Tree_bin_CrossValid_gr_type <- as.data.frame(Tree_bin_CrossValid_gr_type %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_type)
bin_type_entropy <- Tree_bin_CrossValid_gr_type[Tree_bin_CrossValid_gr_type$type == 'Entropy',c("depth","minobs", "JakoscW")]
bin_type_gini <- Tree_bin_CrossValid_gr_type[Tree_bin_CrossValid_gr_type$type == 'Gini',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Type <- cbind("nr_wariantu" = c(1:nrow(bin_type_entropy)), bin_type_entropy, "JakoscW_gini" = bin_type_gini$JakoscW)
Tree_bin_Porownanie_Type
ggplot(Tree_bin_Porownanie_Type , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_gini, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Typu - Entropy i Gini', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Typ", labels = c("Entropy", "Gini")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_prune <- Tree_bin_CrossValid %>% group_by(depth, minobs, overfit)
Tree_bin_CrossValid_gr_prune <- as.data.frame(Tree_bin_CrossValid_gr_prune %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_prune)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs","type", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
Tree_bin_Porownanie_Prune
ggplot(Tree_bin_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_prune <- Tree_bin_CrossValid %>% group_by(depth, minobs, overfit)
Tree_bin_CrossValid_gr_prune <- as.data.frame(Tree_bin_CrossValid_gr_prune %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_prune)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
Tree_bin_Porownanie_Prune
ggplot(Tree_bin_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_prune <- Tree_bin_CrossValid %>% group_by(depth, minobs, type, overfit)
Tree_bin_CrossValid_gr_prune <- as.data.frame(Tree_bin_CrossValid_gr_prune %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_prune)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
Tree_bin_Porownanie_Prune
ggplot(Tree_bin_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_type <- Tree_bin_CrossValid %>% group_by(depth, minobs, type)
Tree_bin_CrossValid_gr_type <- as.data.frame(Tree_bin_CrossValid_gr_type %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_type)
bin_type_entropy <- Tree_bin_CrossValid_gr_type[Tree_bin_CrossValid_gr_type$type == 'Entropy',c("depth","minobs", "JakoscW")]
bin_type_gini <- Tree_bin_CrossValid_gr_type[Tree_bin_CrossValid_gr_type$type == 'Gini',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Type <- cbind("nr_wariantu" = c(1:nrow(bin_type_entropy)), bin_type_entropy, "JakoscW_gini" = bin_type_gini$JakoscW)
Tree_bin_Porownanie_Type
ggplot(Tree_bin_Porownanie_Type , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_gini, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Typu - Entropy i Gini', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Typ", labels = c("Entropy", "Gini")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_prune <- Tree_bin_CrossValid %>% group_by(depth, minobs, type, overfit)
Tree_bin_CrossValid_gr_prune <- as.data.frame(Tree_bin_CrossValid_gr_prune %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_prune)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs","type", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs","type", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
Tree_bin_Porownanie_Prune
ggplot(Tree_bin_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
print(Tree_bin_CrossValid_gr_prune)
# Zaleznosc parametru PRUNE ('prune' / 'none') - ucinajacego drzewo
Tree_bin_CrossValid_gr_prune <- Tree_bin_CrossValid %>% group_by(depth, minobs,overfit)
Tree_bin_CrossValid_gr_prune <- as.data.frame(Tree_bin_CrossValid_gr_prune %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_prune)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs","type", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs","type", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_type$overfit == 'none',c("depth","minobs", "JakoscW")]
View(bin_prune_no)
bin_prune_yes <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs", "JakoscW")]
bin_prune_no <- Tree_bin_CrossValid_gr_prune[Tree_bin_CrossValid_gr_prune$overfit == 'none',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(bin_prune_yes)), bin_prune_yes, "JakoscW_none" = bin_prune_no$JakoscW)
Tree_bin_Porownanie_Prune
ggplot(Tree_bin_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
# Zaleznosc parametru TYPE ('Entropy' / 'Gini')
Tree_bin_CrossValid_gr_type <- Tree_bin_CrossValid %>% group_by(depth, minobs, type)
Tree_bin_CrossValid_gr_type <- as.data.frame(Tree_bin_CrossValid_gr_type %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_type)
bin_type_entropy <- Tree_bin_CrossValid_gr_type[Tree_bin_CrossValid_gr_type$type == 'Entropy',c("depth","minobs", "JakoscW")]
bin_type_gini <- Tree_bin_CrossValid_gr_type[Tree_bin_CrossValid_gr_type$type == 'Gini',c("depth","minobs", "JakoscW")]
Tree_bin_Porownanie_Type <- cbind("nr_wariantu" = c(1:nrow(bin_type_entropy)), bin_type_entropy, "JakoscW_gini" = bin_type_gini$JakoscW)
Tree_bin_Porownanie_Type
ggplot(Tree_bin_Porownanie_Type , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_gini, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Typu - Entropy i Gini', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Typ", labels = c("Entropy", "Gini")) +
theme(legend.position = "bottom")
Tree_bin_CrossValid_gr_wykres_minobs <- Tree_bin_CrossValid %>% group_by(depth, minobs)
Tree_bin_CrossValid_gr_wykres_minobs <- as.data.frame(Tree_bin_CrossValid_gr_wykres_minobs %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(Tree_bin_CrossValid_gr_wykres_minobs)
Tree_bin_Porownanie_Minobs <- data.frame(cbind("minobs" = Tree_bin_CrossValid_gr_wykres_minobs$minobs,
"JakoscW_3" = Tree_bin_CrossValid_gr_wykres_minobs[Tree_bin_CrossValid_gr_wykres_minobs$depth == 3, "JakoscW"],
"JakoscW_4" = Tree_bin_CrossValid_gr_wykres_minobs[Tree_bin_CrossValid_gr_wykres_minobs$depth == 4, "JakoscW"],
"JakoscW_5" = Tree_bin_CrossValid_gr_wykres_minobs[Tree_bin_CrossValid_gr_wykres_minobs$depth == 5, "JakoscW"],
"JakoscW_6" = Tree_bin_CrossValid_gr_wykres_minobs[Tree_bin_CrossValid_gr_wykres_minobs$depth == 6, "JakoscW"]))
Tree_bin_Porownanie_Minobs
ggplot(Tree_bin_Porownanie_Minobs , aes(x=minobs)) +
geom_line(aes(y = JakoscW_3, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_4, color='red'), size=1,) +
geom_line(aes(y = JakoscW_5, color='green'), size=1,) +
geom_line(aes(y = JakoscW_6, color='black'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Binarna - porownanie Acc od MinObs dla kazdej glebokosci', x='MinObs', y='Accuracy') +
scale_color_discrete(name = "Depth", labels = c("D_3", "D_4", "D_5", "D_6")) +
theme(legend.position = "bottom")
Tree_multi_CrossValid_gr_prune <- Tree_multi_CrossValid %>% group_by(depth, minobs, overfit)
Tree_multi_CrossValid_gr_prune <- as.data.frame(Tree_multi_CrossValid_gr_prune %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Tree_multi_CrossValid_gr_prune)
multi_prune_yes <- Tree_multi_CrossValid_gr_prune[Tree_multi_CrossValid_gr_prune$overfit == 'prune',c("depth","minobs", "ACCW")]
multi_prune_no <- Tree_multi_CrossValid_gr_prune[Tree_multi_CrossValid_gr_prune$overfit == 'none',c("depth","minobs", "ACCW")]
Tree_multi_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(multi_prune_yes)), multi_prune_yes, "ACCW_none" = multi_prune_no$ACCW)
Tree_multi_Porownanie_Prune
ggplot(Tree_multi_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_none, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie Prune - prune i none', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Prune", labels = c("prune", "none")) +
theme(legend.position = "bottom")
Tree_multi_CrossValid_gr_type <- Tree_multi_CrossValid %>% group_by(depth, minobs, type)
Tree_multi_CrossValid_gr_type <- as.data.frame(Tree_multi_CrossValid_gr_type %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Tree_multi_CrossValid_gr_type)
multi_type_entropy <- Tree_multi_CrossValid_gr_type[Tree_multi_CrossValid_gr_type$type == 'Entropy',c("depth","minobs", "ACCW")]
multi_type_gini <- Tree_multi_CrossValid_gr_type[Tree_multi_CrossValid_gr_type$type == 'Gini',c("depth","minobs", "ACCW")]
Tree_multi_Porownanie_Prune <- cbind("nr_wariantu" = c(1:nrow(multi_type_entropy)), multi_type_entropy, "ACCW_gini" = multi_type_gini$ACCW)
Tree_multi_Porownanie_Prune
ggplot(Tree_multi_Porownanie_Prune , aes(x=nr_wariantu)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_gini, color='red'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie Typu - Entropy i Gini', x='nr wariantu', y='Accuracy') +
scale_color_discrete(name = "Typ", labels = c("Entropy", "Gini")) +
theme(legend.position = "bottom")
Tree_multi_CrossValid_gr_wykres_minobs <- Tree_multi_CrossValid %>% group_by(depth, minobs)
Tree_multi_CrossValid_gr_wykres_minobs <- as.data.frame(Tree_multi_CrossValid_gr_wykres_minobs %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(Tree_multi_CrossValid_gr_wykres_minobs)
Tree_multi_Porownanie_Minobs <- data.frame(cmultid("minobs" = Tree_multi_CrossValid_gr_wykres_minobs$minobs,
"ACCW_3" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 3, "ACCW"],
"ACCW_4" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 4, "ACCW"],
"ACCW_5" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 5, "ACCW"],
"ACCW_6" = Tree_multi_CrossValid_gr_wykres_minobs[Tree_multi_CrossValid_gr_wykres_minobs$depth == 6, "ACCW"]))
Tree_multi_Porownanie_Minobs
ggplot(Tree_multi_Porownanie_Minobs , aes(x=minobs)) +
geom_line(aes(y = ACCW_3, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_4, color='red'), size=1,) +
geom_line(aes(y = ACCW_5, color='green'), size=1,) +
geom_line(aes(y = ACCW_6, color='black'), size=1,) +
labs(title='Drzwa Decyzyjne - Klas. Wieloklasowa - porownanie MAE od MinObs dla kazdej glebokosci', x='MinObs', y='Accuracy') +
scale_color_discrete(name = "Depth", labels = c("D_3", "D_4", "D_5", "D_6")) +
theme(legend.position = "bottom")
NN_bin_CrossValid_gr_iter <- NN_bin_CrossValid_wynik %>% group_by(h, iter)
NN_bin_CrossValid_gr_iter <- as.data.frame(NN_bin_CrossValid_gr_iter %>% summarise(
AUCT = mean(AUCT), CzuloscT = mean(CzuloscT), SpecyficznoscT = mean(SpecyficznoscT), JakoscT = mean(JakoscT),
AUCW = mean(AUCW), CzuloscW = mean(CzuloscW), SpecyficznoscW = mean(SpecyficznoscW), JakoscW = mean(JakoscW), ))
print(NN_bin_CrossValid_gr_iter)
bin_iter_1 <- NN_bin_CrossValid_gr_iter[NN_bin_CrossValid_gr_iter$iter == unique(NN_bin_CrossValid_gr_iter$iter)[1], c("h", "JakoscW")]
bin_iter_2 <- NN_bin_CrossValid_gr_iter[NN_bin_CrossValid_gr_iter$iter == unique(NN_bin_CrossValid_gr_iter$iter)[2], c("h", "JakoscW")]
NN_bin_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(bin_iter_1)), bin_iter_1, "JakoscW_2" = bin_iter_2$JakoscW)
NN_bin_Porownanie_iter
ggplot(NN_bin_Porownanie_iter , aes(x=nr_wariantu)) +
geom_line(aes(y = JakoscW, color='blue'), size=1, ) +
geom_line(aes(y = JakoscW_2, color='red'), size=1,) +
labs(title='Sieci Neuronowe - Klas. Binarna - porownanie wynikow dla roznych ITER i modeli', x='Wariant warstw', y='Accuracy') +
scale_color_discrete(name = "Iter", labels = c(as.character(unique(NN_bin_CrossValid_gr_iter$iter)[1]), as.character(unique(NN_bin_CrossValid_gr_iter$iter)[2]))) +
theme(legend.position = "bottom")
NN_multi_CrossValid_gr_iter <- NN_multi_CrossValid_wynik %>% group_by(h, iter)
NN_multi_CrossValid_gr_iter <- as.data.frame(NN_multi_CrossValid_gr_iter %>% summarise(ACCT = mean(ACCT), ACCW = mean(ACCW)))
print(NN_multi_CrossValid_gr_iter)
multi_iter_1 <- NN_multi_CrossValid_gr_iter[NN_multi_CrossValid_gr_iter$iter == unique(NN_multi_CrossValid_gr_iter$iter)[1], c("h", "ACCW")]
multi_iter_2 <- NN_multi_CrossValid_gr_iter[NN_multi_CrossValid_gr_iter$iter == unique(NN_multi_CrossValid_gr_iter$iter)[2], c("h", "ACCW")]
NN_multi_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(multi_iter_1)), multi_iter_1, "ACCW_2" = multi_iter_2$ACCW)
NN_multi_Porownanie_iter
ggplot(NN_multi_Porownanie_iter , aes(x=nr_wariantu)) +
geom_line(aes(y = ACCW, color='blue'), size=1, ) +
geom_line(aes(y = ACCW_2, color='red'), size=1,) +
labs(title='Sieci Neuronowe - Klas. Wieloklasowa - porownanie wynikow dla roznych ITER i modeli', x='Wariant warstw', y='Accuracy') +
scale_color_discrete(name = "Iter", labels = c(as.character(unique(NN_multi_CrossValid_gr_iter$iter)[1]), as.character(unique(NN_multi_CrossValid_gr_iter$iter)[2]))) +
theme(legend.position = "bottom")
NN_reg_CrossValid_gr_iter <- NN_reg_CrossValid_wynik %>% group_by(h, iter)
NN_reg_CrossValid_gr_iter <- as.data.frame(NN_reg_CrossValid_gr_iter %>% summarise(MAET = mean(MAET), MAEW = mean(MAEW)))
print(NN_reg_CrossValid_gr_iter)
reg_iter_1 <- NN_reg_CrossValid_gr_iter[NN_reg_CrossValid_gr_iter$iter == unique(NN_reg_CrossValid_gr_iter$iter)[1], c("h", "MAEW")]
reg_iter_2 <- NN_reg_CrossValid_gr_iter[NN_reg_CrossValid_gr_iter$iter == unique(NN_reg_CrossValid_gr_iter$iter)[2], c("h", "MAEW")]
NN_reg_Porownanie_iter <- cbind("nr_wariantu" = c(1:nrow(reg_iter_1)), reg_iter_1, "MAEW_2" = reg_iter_2$MAEW)
NN_reg_Porownanie_iter
ggplot(NN_reg_Porownanie_iter , aes(x=nr_wariantu)) +
geom_line(aes(y = MAEW, color='blue'), size=1, ) +
geom_line(aes(y = MAEW_2, color='red'), size=1,) +
labs(title='Sieci Neuronowe - Regresja - porownanie wynikow dla roznych ITER i modeli', x='Wariant warstw', y='MAE') +
scale_color_discrete(name = "Iter", labels = c(as.character(unique(NN_reg_CrossValid_gr_iter$iter)[1]), as.character(unique(NN_reg_CrossValid_gr_iter$iter)[2]))) +
theme(legend.position = "bottom")
source("funkcje.R")
parTune_KNN_bin <- expand.grid(k=c(2:15))
KNN_bin_CrossValid <- CrossValidTune(dane_bin, dane_bin_X, dane_bin_Y, kFold = 10, parTune_KNN_bin, algorytm="KNN", seed = 123)
print(KNN_bin_best_W)
parTune_KNN_bin <- expand.grid(k=c(9))
KNN_bin_CrossValid <- CrossValidTune(dane_bin, dane_bin_X, dane_bin_Y, kFold = 6, parTune_KNN_bin, algorytm="KNN", seed = 123)
source("funkcje.R")
parTune_KNN_bin <- expand.grid(k=c(9))
KNN_bin_CrossValid <- CrossValidTune(dane_bin, dane_bin_X, dane_bin_Y, kFold = 6, parTune_KNN_bin, algorytm="KNN", seed = 123)
# KNN_bin_CrossValid
KNN_bin_CrossValid
print(head(dane_bin))
View(dane_multi)
print(Tree_bin_best_W)
dane_bin <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00292/Wholesale%20customers%20data.csv")
View(dane_bin)
View(dane_bin)
View(dane_multi)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/cpu-performance/machine.data", header = FALSE)
View(dane_reg)
View(dane_reg)
print("Najlepsze KNN - wlasne: ")
print(KNN_bin_best_W)
print(paste("Najlepszy KNN w R: k = ", KNN_bin_R$finalModel$k, " | Accuracy = " ,KNN_bin_R_Wynik$Accuracy[KNN_bin_R_Wynik$k == KNN_bin_R$finalModel$k]))
print("Najlepsze Drzewo Decyzyjne - wlasne: ")
print(Tree_bin_best_W)
print(paste("Najlepszy Tree w R: Max Depth = ", Tree_bin_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Accuracy = " , Tree_bin_R_Wynik$Accuracy[Tree_bin_R_Wynik$maxdepth == Tree_bin_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print("Najlepsze NN - wlasne: ")
print(NN_bin_best_W)
print(paste("Najlepszy NN w R: h = ", NN_bin_R[["finalModel"]][["tuneValue"]][["size"]], " | Accuracy = " , NN_bin_R_Wynik$Accuracy[NN_bin_R_Wynik$size == NN_bin_R[["finalModel"]][["tuneValue"]][["size"]]]))
print(paste("Najlepszy KNN w R: k = ", KNN_multi_R$finalModel$k, " | Accuracy = " ,KNN_multi_R_Wynik$Accuracy[KNN_multi_R_Wynik$k == KNN_multi_R$finalModel$k]))
print(KNN_multi_best_W)
print(paste("Najlepszy KNN w R: k = ", KNN_multi_R$finalModel$k, " | Accuracy = " ,KNN_multi_R_Wynik$Accuracy[KNN_multi_R_Wynik$k == KNN_multi_R$finalModel$k]))
print(Tree_multi_best_W)
print(NN_multi_best_W)
print(paste("Najlepszy KNN w R: k = ", KNN_multi_R$finalModel$k, " | Accuracy = " ,KNN_multi_R_Wynik$Accuracy[KNN_multi_R_Wynik$k == KNN_multi_R$finalModel$k]))
print(paste("Najlepszy Tree w R: Max Depth = ", Tree_multi_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | Accuracy = " , Tree_multi_R_Wynik$Accuracy[Tree_multi_R_Wynik$maxdepth == Tree_multi_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print(NN_multi_best_W)
print(paste("Najlepszy NN w R: h = ", NN_multi_R[["finalModel"]][["tuneValue"]][["size"]], " | Accuracy = " , NN_multi_R_Wynik$Accuracy[NN_multi_R_Wynik$size == NN_multi_R[["finalModel"]][["tuneValue"]][["size"]]]))
print(KNN_multi_best_W)
print(KNN_reg_best_W)
print(paste("Najlepszy KNN w R - Regresja: k = ", KNN_reg_R$finalModel$k, " | MAE = " ,KNN_reg_R_Wynik$MAE[KNN_reg_R_Wynik$k == KNN_reg_R$finalModel$k]))
print(Tree_reg_best_W)
print(paste("Najlepszy Tree w R - Regresja: Max Depth = ", Tree_reg_R[["finalModel"]][["tuneValue"]][["maxdepth"]], " | MAE = " , Tree_reg_R_Wynik$MAE[Tree_reg_R_Wynik$maxdepth == Tree_reg_R[["finalModel"]][["tuneValue"]][["maxdepth"]]]))
print(NN_reg_best_W)
print(paste0("Najlepszy NN w R - Regresja: h = ", NN_reg_R[["finalModel"]][["tuneValue"]][["size"]], " | MAE = " , NN_reg_R_Wynik$MAE[NN_reg_R_Wynik$size == NN_reg_R[["finalModel"]][["tuneValue"]][["size"]]][1]))
source("funkcje.R")
parTune_Tree_reg <- expand.grid(depth=c(3:6), minobs=c(2:5), type=c('SS'), overfit = c('none'), cf=0.2)
Tree_reg_CrossValid <- CrossValidTune(dane_reg, dane_reg_X, dane_reg_Y, kFold = 10, parTune_Tree_reg, algorytm="Tree", seed = 123)
print(Tree_reg_CrossValid_gr)
dane_reg
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/cpu-performance/machine.data", header = FALSE)
dane_reg <- dane_reg[,-c(2,10)]
dane_reg[,1] <- as.numeric(dane_reg[,1])
reg_kolumny <- colnames(dane_reg)
dane_reg_X <- reg_kolumny[-8]
dane_reg_Y <- reg_kolumny[8]
print("*** Dane - regresja ***")
print(head(dane_reg))
print("*********************************")
cat(" \n")
parTune_Tree_reg <- expand.grid(depth=c(3:6), minobs=c(2:5), type=c('SS'), overfit = c('none'), cf=0.2)
Tree_reg_CrossValid <- CrossValidTune(dane_reg, dane_reg_X, dane_reg_Y, kFold = 10, parTune_Tree_reg, algorytm="Tree", seed = 123)

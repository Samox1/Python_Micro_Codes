dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[,-5]
Y <- nazwy_kolumn[5]
X <- nazwy_kolumn[-5]
parTune <- expand.grid(depth=c(3:6), minobs=c(2:8))
CrossValidTune(dane, X, Y, kFold = 10, parTune, seed = 123, algorytm="KNN")
rm(list=ls())
library(data.tree)
library(rpart.plot)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:6), minobs=c(2:8))
CrossValidTune(dane, X, Y, kFold = 10, parTune, seed = 123, algorytm="KNN")
rm(list=ls())
library(data.tree)
library(rpart.plot)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:6), minobs=c(2:8))
CrossValidTune(dane, X, Y, kFold = 10, parTune, seed = 123, algorytm="KNN")
rm(list=ls())
library(data.tree)
library(rpart.plot)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:6), minobs=c(2:8))
CrossValidTune(dane, X, Y, kFold = 10, parTune, seed = 123, algorytm="KNN")
rm(list=ls())
library(data.tree)
library(rpart.plot)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:6), minobs=c(2:8))
CrossValidTune(dane, X, Y, kFold = 10, parTune, algorytm="KNN", seed = 123)
rm(list=ls())
library(data.tree)
library(rpart.plot)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:6), minobs=c(2:8))
CrossValidTune(dane, X, Y, kFold = 10, parTune, algorytm="KNN", seed = 123)
parTune <- expand.grid(depth=c(3:4), minobs=c(2:3))
CrossValidTune(dane, X, Y, kFold = 10, parTune, algorytm="KNN", seed = 123)
CrossValidTune(dane, X, Y, kFold = 2, parTune, algorytm="KNN", seed = 123)
kappa <- CrossValidTune(dane, X, Y, kFold = 2, parTune, algorytm="KNN", seed = 123)
View(kappa)
n <-rep(c(1:2), times=length(parTune))
n <-rep(c(1:3), times=length(parTune))
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
View(kappa)
expand.grid(k=c(1:3), parTune)
expand.grid(el=c(1:3), parTune)
expand.grid(el=c(1:3), parTune[,1])
expand.grid(el=c(1:3), colnames(parTune[,1]) = parTune[,1])
expand.grid(el=c(1:3), parTune[,1])
colnames<-(parTune, colnames(parTune))
expand.grid.df(el=c(1:3), parTune[,1])
unlist(parTune)
expand.grid(el=c(1:3),  c(parTune))
(parTune)
expand.grid(el=c(1:3),  unlist(parTune))
?aapply(array, margin, ...)
?apply(array, margin, ...)
parTune <- c(depth=c(3:4), minobs=c(2:3))
View(kappa)
parTune
parTune <- expand.grid(depth=c(3:4), minobs=c(2:3))
parTune
expand.grid(parTune)
expand.grid(parTune, k)
expand.grid(parTune, k=c(1:3))
expand.grid(k=c(1:3), parTune)
unique(parTune)
expand.grid(k=c(1:3), unique(parTune))
expand.grid(k=c(1:3), list(parTune))
row(parTune)
as.vector(parTune)
expand.grid(k=c(1:3), as.vector(parTune))
as.vector(parTune)
expand.grid(k=c(1:3), as.vector(parTune))
expand(parTune, c(1:3))
library(tidyverse)
expand(parTune, c(1:3))
expand(c(1:3))
expand(c(1:3), parTune)
View(parTune)
expand_grid(c(1:3), parTune)
as.data.frame(expand_grid(c(1:3), parTune))
as.data.frame(expand_grid(k=c(1:3), parTune))
CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
rm(list=ls())
library(data.tree)
library(rpart.plot)
library(tidyverse)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:4), minobs=c(2:3))
CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
rm(list=ls())
library(data.tree)
library(rpart.plot)
library(tidyverse)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:4), minobs=c(2:3))
CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
rm(list=ls())
library(data.tree)
library(rpart.plot)
library(tidyverse)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:4), minobs=c(2:3))
CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
View(kappa)
kappa[[1]]
rm(list=ls())
library(data.tree)
library(rpart.plot)
library(tidyverse)
source("funkcje.R")
dane <- iris
nazwy_kolumn <- colnames(dane)
X <- nazwy_kolumn[-5]
Y <- nazwy_kolumn[5]
parTune <- expand.grid(depth=c(3:4), minobs=c(2:3))
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
lista = list()
for(i in 1:kFold)
{
lista[[i]] <- sample(1:dl_wektora, size = dl_wektora, replace = F)
indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, SpecyficznoscW=0, MAPEW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
View(kappa)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
lista = list()
for(i in 1:kFold)
{
lista[[i]] <- sample(1:dl_wektora, size = dl_wektora, replace = F)
indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
print(indeks_U)
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
lista = list()
for(i in 1:kFold)
{
lista[[i]] <- sample(1:dl_wektora, size = dl_wektora, replace = F)
indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
print(indeks_U)
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
lista[[2]][[4]]
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
lista = list()
for(i in 1:kFold)
{
lista[[i]] <- sample(1:dl_wektora, size = dl_wektora, replace = F)
indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
#print(indeks_U)
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
print(lista[[2]][[4]])
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
lista = list()
for(i in 1:kFold)
{
lista[[i]] <- sample(1:dl_wektora, size = dl_wektora, replace = F)
indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
lista[[i]]
print(indeks_U)
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
lista = list()
for(i in 1:kFold)
{
lista[[i]] <- sample(1:dl_wektora, size = dl_wektora, replace = F)
indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
print(lista[[i]])
print(length(indeks_U))
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
podzial_zbioru <- data.frame()
for(i in 1:kFold)
{
# lista[[i]] <- c(1:nrow(dane))
# indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
#
# print(lista[[i]])
# print(length(indeks_U))
indxTest <- sample( 1:nrow(dane), size = 1/kFold * nrow(dane), replace = F )
podzial_zbioru[indxTest,i] <- 1
podzial_zbioru[-indxTest,i] <- 2
for( j in 1:dl_wektora)
{
for(k in 1:length(indeks_U))
{
if(indeks_U == j)
{
lista[[i]][[j]]==1
}
else
{
lista[[i]][[j]]==2
}
}
}
}
print(podzial_zbioru)
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
CrossValidTune <- function(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)
{
set.seed(seed)
dl_wektora = nrow(dane)
ramka <- as.data.frame(expand_grid(k=c(1:kFold), parTune))
podzial_zbioru <- data.frame()
for(i in 1:kFold)
{
# lista[[i]] <- c(1:nrow(dane))
# indeks_U <- sample( x = 1:dl_wektora, size = (1-1/kFold)*dl_wektora, replace = F )
#
# print(lista[[i]])
# print(length(indeks_U))
indxTest <- sample( 1:nrow(dane), size = 1/kFold * nrow(dane), replace = F )
podzial_zbioru[indxTest,i] <- 1
podzial_zbioru[-indxTest,i] <- 2
# for( j in 1:dl_wektora)
# {
#   for(k in 1:length(indeks_U))
#   {
#     if(indeks_U == j)
#     {
#       lista[[i]][[j]]==1
#     }
#     else
#     {
#       lista[[i]][[j]]==2
#     }
#   }
# }
}
print(podzial_zbioru)
if(is.numeric(dane[,Y]))
{
regresja <- data.frame(parTune, MAEt=0, MSEt=0, MAPEt=0, MAEw=0, MSEw=0, MAPEw=0  )
return(regresja)
}
else if(is.factor(dane[,Y]))
{
klasyfikacja_bin <- data.frame(parTune, AUCT=0, CzuloscT=0, SpecyficznoscT=0, JakoscT=0,
AUCW=0, CzuloscT=0, SpecyficznoscW=0, JakoscW=0)
return(klasyfikacja_bin)
}
else
{
print("Niepoprawne dane")
}
}
kappa <- CrossValidTune(dane, X, Y, kFold = 3, parTune, algorytm="KNN", seed = 123)

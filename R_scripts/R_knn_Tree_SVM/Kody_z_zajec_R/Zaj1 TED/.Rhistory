microbenchmark(cumsum(1:30),cumsumCpp(1:30))
# Zadanie 5
library(microbenchmark)
microbenchmark(cumsum(1:30),cumsumCpp(1:30))
#Zadanie 2
cppFunction({'NumericVector cumsumCpp(NumericVector v){
double a = 0;
NumericVector vect(v.size());
for(int i = 0; i < v.size(); i++){
a += v[i];
vect[i] = a;
}
return vect;
}
'})
#Zadanie 1
library(Rcpp)
#Zadanie 2
cppFunction({'NumericVector cumsumCpp(NumericVector v){
double a = 0;
NumericVector vect(v.size());
for(int i = 0; i < v.size(); i++){
a += v[i];
vect[i] = a;
}
return vect;
}
'})
#Zadanie 3
cppFunction({'NumericVector revCpp(NumericVector v){
int a = v.size();
NumericVector vect(a);
for(int i = 0; i<a; i++){
vect[i] = v[a-i-1];
}
return vect;
}
'})
#Zadanie 3
cppFunction({'NumericVector revCpp(NumericVector v){
int a = v.size();
NumericVector vect(a);
for(int i = 0; i<a; i++){
vect[i] = v[a-i-1];
}
return vect;
}
'})
cppFunction({'NumericVector revCpp(NumericVector v){
int a = v.size();
NumericVector vect(a);
for(int i = 0; i<a; i++){
vect[i] = v[a-i-1];
}
return vect;
}
'})
#Zadanie 3
cppFunction({'NumericVector revCpp(NumericVector v){
int a = v.size();
NumericVector vect(a);
for(int i = 0; i<a; i++){
vect[i] = v[a-i-1];
}
return vect;
}
'})
microbenchmark(cumsum(1:30),cumsumCpp(1:30))
microbenchmark(rev(1:5), revCpp(1:5))

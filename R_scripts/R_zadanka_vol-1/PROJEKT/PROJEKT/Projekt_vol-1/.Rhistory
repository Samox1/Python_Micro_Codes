wagi[[w]] <- (lr * dw_wagi[[w+1]]) + wagi[[w]]
}
W_out <- (lr * dW_out) + W_out
}
else
{
dW_out <- t(z_in) %*% dy_hat
dz_in <-  dy_hat %*% t(W_out) * funkcja_dsigmoid(z_in)
dW_in <- t(x) %*% dz_in[,-1]
W_in <- (lr * dW_in) + W_in
W_out <- (lr * dW_out) + W_out
}
return(list(W_in = W_in, wagi = wagi, W_out = W_out))
}
trainNN_test <- function( Yname, Xnames, data, h, lr, iteracje_max, seed){
set.seed(seed)
h <- unlist(h, use.names = FALSE)
y_tar <- data[,Yname]
x <- cbind(rep(1, nrow(data[,Xnames]) ), data[,Xnames])
W_in <- matrix(runif(ncol(x) * h[1], -1, 1), nrow = ncol(x))
W_out <- matrix(runif((h[length(h)] + 1), -1, 1), nrow = h[length(h)] + 1 )
wagi <- list()
if(length(h) > 1)
{
for (i in 1:(length(h)-1))
{
wagi[[i]] <- matrix(runif((h[i]+1)*h[i+1], -1, 1), nrow = 1+h[i])
}
}
else
{
wagi[[1]] <- 0
}
for(i in 1:iteracje_max)
{
prop_wp <- propagacja_wprzod_test(x, W_in, wagi, W_out)
prop_ws <- propagacja_wstecz_test(x, y_tar, y_hat = prop_wp$y_hat, z_in = prop_wp$z_in, z_wagi = prop_wp$z_wagi, W_in, wagi, W_out, lr)
W_in <- prop_ws$W_in
wagi <- prop_ws$wagi
W_out <- prop_ws$W_out
cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,7), lr =  0.01, iteracje_max = 1000, seed = 357)
propagacja_wstecz_test <- function(x, y_tar, y_hat, z_in, z_wagi, W_in, wagi, W_out, lr){
dy_hat <- (y_tar - y_hat) * funkcja_dsigmoid(y_hat)
if(length(wagi[[1]]) > 1)
{
dW_out <- t(z_wagi[[length(z_wagi)]]) %*% dy_hat
dz <- list()
dw_wagi <- list()
if(length(z_wagi) == 1)
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_in) %*% dz[[(length(z_wagi)+1)]][,-1]
}
else
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_wagi[[length(z_wagi)-1]]) %*% dz[[(length(z_wagi)+1)]][,-1]
}
if(length(z_wagi) > 1)
{
# if(length(z_wagi) > 3)
# {
#   for (i in (length(z_wagi)+1):3)
#   {
#     dz[[i-1]] <- dz[[i]][,-1] %*% t(wagi[[i-1]]) * funkcja_dsigmoid(z_wagi[[i-1]])
#     dw_wagi[[i-1]] <- t(z_wagi[[i-1]]) %*% dz[[i-1]][,-1]
#   }
# }
# dz[[length(z_wagi)]] <- dz[[length(z_wagi)+1]][,-1] %*% t(wagi[[length(z_wagi)]]) * funkcja_dsigmoid(z_wagi[[length(z_wagi)-1]])
# dw_wagi[[length(z_wagi)]] <- t(z_in) %*% dz[[length(z_wagi)]][,-1]
dz[[2]] <- dz[[3]][,-1] %*% t(wagi[[2]]) * funkcja_dsigmoid(z_wagi[[1]])
dw_wagi[[2]] <- t(z_in) %*% dz[[2]][,-1]
}
dz[[1]] <- dz[[2]][,-1] %*% t(wagi[[1]]) * funkcja_dsigmoid(z_in)
dw_wagi[[1]] <- t(x) %*% dz[[1]][,-1]
W_in <- (lr * dw_wagi[[1]]) + W_in
for (w in 1:length(wagi)) {
# print(w)
# print(dim(dw_wagi[[w+1]]))
# print(dim(wagi[[w]]))
wagi[[w]] <- (lr * dw_wagi[[w+1]]) + wagi[[w]]
}
W_out <- (lr * dW_out) + W_out
}
else
{
dW_out <- t(z_in) %*% dy_hat
dz_in <-  dy_hat %*% t(W_out) * funkcja_dsigmoid(z_in)
dW_in <- t(x) %*% dz_in[,-1]
W_in <- (lr * dW_in) + W_in
W_out <- (lr * dW_out) + W_out
}
return(list(W_in = W_in, wagi = wagi, W_out = W_out))
}
trainNN_test <- function( Yname, Xnames, data, h, lr, iteracje_max, seed){
set.seed(seed)
h <- unlist(h, use.names = FALSE)
y_tar <- data[,Yname]
x <- cbind(rep(1, nrow(data[,Xnames]) ), data[,Xnames])
W_in <- matrix(runif(ncol(x) * h[1], -1, 1), nrow = ncol(x))
W_out <- matrix(runif((h[length(h)] + 1), -1, 1), nrow = h[length(h)] + 1 )
wagi <- list()
if(length(h) > 1)
{
for (i in 1:(length(h)-1))
{
wagi[[i]] <- matrix(runif((h[i]+1)*h[i+1], -1, 1), nrow = 1+h[i])
}
}
else
{
wagi[[1]] <- 0
}
for(i in 1:iteracje_max)
{
prop_wp <- propagacja_wprzod_test(x, W_in, wagi, W_out)
prop_ws <- propagacja_wstecz_test(x, y_tar, y_hat = prop_wp$y_hat, z_in = prop_wp$z_in, z_wagi = prop_wp$z_wagi, W_in, wagi, W_out, lr)
W_in <- prop_ws$W_in
wagi <- prop_ws$wagi
W_out <- prop_ws$W_out
cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,7), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
propagacja_wstecz_test <- function(x, y_tar, y_hat, z_in, z_wagi, W_in, wagi, W_out, lr){
dy_hat <- (y_tar - y_hat) * funkcja_dsigmoid(y_hat)
if(length(wagi[[1]]) > 1)
{
dW_out <- t(z_wagi[[length(z_wagi)]]) %*% dy_hat
dz <- list()
dw_wagi <- list()
if(length(z_wagi) == 1)
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_in) %*% dz[[(length(z_wagi)+1)]][,-1]
}
else
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_wagi[[length(z_wagi)-1]]) %*% dz[[(length(z_wagi)+1)]][,-1]
}
if(length(z_wagi) > 1)
{
if(length(z_wagi) > 2)
{
for (i in (length(z_wagi)+1):3)
{
dz[[i-1]] <- dz[[i]][,-1] %*% t(wagi[[i-1]]) * funkcja_dsigmoid(z_wagi[[i-1]])
dw_wagi[[i-1]] <- t(z_wagi[[i-2]]) %*% dz[[i-1]][,-1]
}
}
# dz[[length(z_wagi)]] <- dz[[length(z_wagi)+1]][,-1] %*% t(wagi[[length(z_wagi)]]) * funkcja_dsigmoid(z_wagi[[length(z_wagi)-1]])
# dw_wagi[[length(z_wagi)]] <- t(z_in) %*% dz[[length(z_wagi)]][,-1]
dz[[2]] <- dz[[3]][,-1] %*% t(wagi[[2]]) * funkcja_dsigmoid(z_wagi[[1]])
dw_wagi[[2]] <- t(z_in) %*% dz[[2]][,-1]
}
dz[[1]] <- dz[[2]][,-1] %*% t(wagi[[1]]) * funkcja_dsigmoid(z_in)
dw_wagi[[1]] <- t(x) %*% dz[[1]][,-1]
W_in <- (lr * dw_wagi[[1]]) + W_in
for (w in 1:length(wagi)) {
# print(w)
# print(dim(dw_wagi[[w+1]]))
# print(dim(wagi[[w]]))
wagi[[w]] <- (lr * dw_wagi[[w+1]]) + wagi[[w]]
}
W_out <- (lr * dW_out) + W_out
}
else
{
dW_out <- t(z_in) %*% dy_hat
dz_in <-  dy_hat %*% t(W_out) * funkcja_dsigmoid(z_in)
dW_in <- t(x) %*% dz_in[,-1]
W_in <- (lr * dW_in) + W_in
W_out <- (lr * dW_out) + W_out
}
return(list(W_in = W_in, wagi = wagi, W_out = W_out))
}
trainNN_test <- function( Yname, Xnames, data, h, lr, iteracje_max, seed){
set.seed(seed)
h <- unlist(h, use.names = FALSE)
y_tar <- data[,Yname]
x <- cbind(rep(1, nrow(data[,Xnames]) ), data[,Xnames])
W_in <- matrix(runif(ncol(x) * h[1], -1, 1), nrow = ncol(x))
W_out <- matrix(runif((h[length(h)] + 1), -1, 1), nrow = h[length(h)] + 1 )
wagi <- list()
if(length(h) > 1)
{
for (i in 1:(length(h)-1))
{
wagi[[i]] <- matrix(runif((h[i]+1)*h[i+1], -1, 1), nrow = 1+h[i])
}
}
else
{
wagi[[1]] <- 0
}
for(i in 1:iteracje_max)
{
prop_wp <- propagacja_wprzod_test(x, W_in, wagi, W_out)
prop_ws <- propagacja_wstecz_test(x, y_tar, y_hat = prop_wp$y_hat, z_in = prop_wp$z_in, z_wagi = prop_wp$z_wagi, W_in, wagi, W_out, lr)
W_in <- prop_ws$W_in
wagi <- prop_ws$wagi
W_out <- prop_ws$W_out
cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5), lr =  0.01, iteracje_max = 1000, seed = 357)
propagacja_wstecz_test <- function(x, y_tar, y_hat, z_in, z_wagi, W_in, wagi, W_out, lr){
dy_hat <- (y_tar - y_hat) * funkcja_dsigmoid(y_hat)
if(length(wagi[[1]]) > 1)
{
dW_out <- t(z_wagi[[length(z_wagi)]]) %*% dy_hat
dz <- list()
dw_wagi <- list()
if(length(z_wagi) == 1)
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_in) %*% dz[[(length(z_wagi)+1)]][,-1]
}
else
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_wagi[[length(z_wagi)-1]]) %*% dz[[(length(z_wagi)+1)]][,-1]
}
if(length(z_wagi) > 1)
{
if(length(z_wagi) > 2)
{
for (i in (length(z_wagi)):3)
{
dz[[i-1]] <- dz[[i]][,-1] %*% t(wagi[[i-1]]) * funkcja_dsigmoid(z_wagi[[i-1]])
dw_wagi[[i-1]] <- t(z_wagi[[i-2]]) %*% dz[[i-1]][,-1]
}
}
# dz[[length(z_wagi)]] <- dz[[length(z_wagi)+1]][,-1] %*% t(wagi[[length(z_wagi)]]) * funkcja_dsigmoid(z_wagi[[length(z_wagi)-1]])
# dw_wagi[[length(z_wagi)]] <- t(z_in) %*% dz[[length(z_wagi)]][,-1]
dz[[2]] <- dz[[3]][,-1] %*% t(wagi[[2]]) * funkcja_dsigmoid(z_wagi[[1]])
dw_wagi[[2]] <- t(z_in) %*% dz[[2]][,-1]
}
dz[[1]] <- dz[[2]][,-1] %*% t(wagi[[1]]) * funkcja_dsigmoid(z_in)
dw_wagi[[1]] <- t(x) %*% dz[[1]][,-1]
W_in <- (lr * dw_wagi[[1]]) + W_in
for (w in 1:length(wagi)) {
# print(w)
# print(dim(dw_wagi[[w+1]]))
# print(dim(wagi[[w]]))
wagi[[w]] <- (lr * dw_wagi[[w+1]]) + wagi[[w]]
}
W_out <- (lr * dW_out) + W_out
}
else
{
dW_out <- t(z_in) %*% dy_hat
dz_in <-  dy_hat %*% t(W_out) * funkcja_dsigmoid(z_in)
dW_in <- t(x) %*% dz_in[,-1]
W_in <- (lr * dW_in) + W_in
W_out <- (lr * dW_out) + W_out
}
return(list(W_in = W_in, wagi = wagi, W_out = W_out))
}
trainNN_test <- function( Yname, Xnames, data, h, lr, iteracje_max, seed){
set.seed(seed)
h <- unlist(h, use.names = FALSE)
y_tar <- data[,Yname]
x <- cbind(rep(1, nrow(data[,Xnames]) ), data[,Xnames])
W_in <- matrix(runif(ncol(x) * h[1], -1, 1), nrow = ncol(x))
W_out <- matrix(runif((h[length(h)] + 1), -1, 1), nrow = h[length(h)] + 1 )
wagi <- list()
if(length(h) > 1)
{
for (i in 1:(length(h)-1))
{
wagi[[i]] <- matrix(runif((h[i]+1)*h[i+1], -1, 1), nrow = 1+h[i])
}
}
else
{
wagi[[1]] <- 0
}
for(i in 1:iteracje_max)
{
prop_wp <- propagacja_wprzod_test(x, W_in, wagi, W_out)
prop_ws <- propagacja_wstecz_test(x, y_tar, y_hat = prop_wp$y_hat, z_in = prop_wp$z_in, z_wagi = prop_wp$z_wagi, W_in, wagi, W_out, lr)
W_in <- prop_ws$W_in
wagi <- prop_ws$wagi
W_out <- prop_ws$W_out
cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5), lr =  0.01, iteracje_max = 1000, seed = 357)
propagacja_wstecz_test <- function(x, y_tar, y_hat, z_in, z_wagi, W_in, wagi, W_out, lr){
dy_hat <- (y_tar - y_hat) * funkcja_dsigmoid(y_hat)
if(length(wagi[[1]]) > 1)
{
dW_out <- t(z_wagi[[length(z_wagi)]]) %*% dy_hat
dz <- list()
dw_wagi <- list()
if(length(z_wagi) == 1)
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_in) %*% dz[[(length(z_wagi)+1)]][,-1]
}
else
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_wagi[[length(z_wagi)-1]]) %*% dz[[(length(z_wagi)+1)]][,-1]
}
if(length(z_wagi) > 1)
{
if(length(z_wagi) > 2)
{
for (i in (length(z_wagi)):3)
{
dz[[i]] <- dz[[i+1]][,-1] %*% t(wagi[[i]]) * funkcja_dsigmoid(z_wagi[[i-1]])
dw_wagi[[i]] <- t(z_wagi[[i-2]]) %*% dz[[i]][,-1]
}
}
# dz[[length(z_wagi)]] <- dz[[length(z_wagi)+1]][,-1] %*% t(wagi[[length(z_wagi)]]) * funkcja_dsigmoid(z_wagi[[length(z_wagi)-1]])
# dw_wagi[[length(z_wagi)]] <- t(z_in) %*% dz[[length(z_wagi)]][,-1]
dz[[2]] <- dz[[3]][,-1] %*% t(wagi[[2]]) * funkcja_dsigmoid(z_wagi[[1]])
dw_wagi[[2]] <- t(z_in) %*% dz[[2]][,-1]
}
dz[[1]] <- dz[[2]][,-1] %*% t(wagi[[1]]) * funkcja_dsigmoid(z_in)
dw_wagi[[1]] <- t(x) %*% dz[[1]][,-1]
W_in <- (lr * dw_wagi[[1]]) + W_in
for (w in 1:length(wagi)) {
# print(w)
# print(dim(dw_wagi[[w+1]]))
# print(dim(wagi[[w]]))
wagi[[w]] <- (lr * dw_wagi[[w+1]]) + wagi[[w]]
}
W_out <- (lr * dW_out) + W_out
}
else
{
dW_out <- t(z_in) %*% dy_hat
dz_in <-  dy_hat %*% t(W_out) * funkcja_dsigmoid(z_in)
dW_in <- t(x) %*% dz_in[,-1]
W_in <- (lr * dW_in) + W_in
W_out <- (lr * dW_out) + W_out
}
return(list(W_in = W_in, wagi = wagi, W_out = W_out))
}
trainNN_test <- function( Yname, Xnames, data, h, lr, iteracje_max, seed){
set.seed(seed)
h <- unlist(h, use.names = FALSE)
y_tar <- data[,Yname]
x <- cbind(rep(1, nrow(data[,Xnames]) ), data[,Xnames])
W_in <- matrix(runif(ncol(x) * h[1], -1, 1), nrow = ncol(x))
W_out <- matrix(runif((h[length(h)] + 1), -1, 1), nrow = h[length(h)] + 1 )
wagi <- list()
if(length(h) > 1)
{
for (i in 1:(length(h)-1))
{
wagi[[i]] <- matrix(runif((h[i]+1)*h[i+1], -1, 1), nrow = 1+h[i])
}
}
else
{
wagi[[1]] <- 0
}
for(i in 1:iteracje_max)
{
prop_wp <- propagacja_wprzod_test(x, W_in, wagi, W_out)
prop_ws <- propagacja_wstecz_test(x, y_tar, y_hat = prop_wp$y_hat, z_in = prop_wp$z_in, z_wagi = prop_wp$z_wagi, W_in, wagi, W_out, lr)
W_in <- prop_ws$W_in
wagi <- prop_ws$wagi
W_out <- prop_ws$W_out
cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5,15), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5,15,50), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
View(TEST_SIEC_NN)
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(wagi) > 1)
{
for (i in 2:length(wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,5], TEST_SIEC_NN) >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(wagi) > 1)
{
for (i in 2:length(wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(NN_nauczona$wagi) > 1)
{
for (i in 2:length(NN_nauczona$wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(NN_nauczona$wagi) > 1)
{
for (i in 2:length(NN_nauczona$wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(NN_nauczona$wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,8,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))

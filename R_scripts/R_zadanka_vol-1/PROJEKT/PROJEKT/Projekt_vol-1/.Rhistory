cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5), lr =  0.01, iteracje_max = 1000, seed = 357)
propagacja_wstecz_test <- function(x, y_tar, y_hat, z_in, z_wagi, W_in, wagi, W_out, lr){
dy_hat <- (y_tar - y_hat) * funkcja_dsigmoid(y_hat)
if(length(wagi[[1]]) > 1)
{
dW_out <- t(z_wagi[[length(z_wagi)]]) %*% dy_hat
dz <- list()
dw_wagi <- list()
if(length(z_wagi) == 1)
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_in) %*% dz[[(length(z_wagi)+1)]][,-1]
}
else
{
dz[[(length(z_wagi)+1)]] <- dy_hat %*% t(W_out) * funkcja_dsigmoid(z_wagi[[length(z_wagi)]])
dw_wagi[[(length(z_wagi)+1)]] <- t(z_wagi[[length(z_wagi)-1]]) %*% dz[[(length(z_wagi)+1)]][,-1]
}
if(length(z_wagi) > 1)
{
if(length(z_wagi) > 2)
{
for (i in (length(z_wagi)):3)
{
dz[[i]] <- dz[[i+1]][,-1] %*% t(wagi[[i]]) * funkcja_dsigmoid(z_wagi[[i-1]])
dw_wagi[[i]] <- t(z_wagi[[i-2]]) %*% dz[[i]][,-1]
}
}
# dz[[length(z_wagi)]] <- dz[[length(z_wagi)+1]][,-1] %*% t(wagi[[length(z_wagi)]]) * funkcja_dsigmoid(z_wagi[[length(z_wagi)-1]])
# dw_wagi[[length(z_wagi)]] <- t(z_in) %*% dz[[length(z_wagi)]][,-1]
dz[[2]] <- dz[[3]][,-1] %*% t(wagi[[2]]) * funkcja_dsigmoid(z_wagi[[1]])
dw_wagi[[2]] <- t(z_in) %*% dz[[2]][,-1]
}
dz[[1]] <- dz[[2]][,-1] %*% t(wagi[[1]]) * funkcja_dsigmoid(z_in)
dw_wagi[[1]] <- t(x) %*% dz[[1]][,-1]
W_in <- (lr * dw_wagi[[1]]) + W_in
for (w in 1:length(wagi)) {
# print(w)
# print(dim(dw_wagi[[w+1]]))
# print(dim(wagi[[w]]))
wagi[[w]] <- (lr * dw_wagi[[w+1]]) + wagi[[w]]
}
W_out <- (lr * dW_out) + W_out
}
else
{
dW_out <- t(z_in) %*% dy_hat
dz_in <-  dy_hat %*% t(W_out) * funkcja_dsigmoid(z_in)
dW_in <- t(x) %*% dz_in[,-1]
W_in <- (lr * dW_in) + W_in
W_out <- (lr * dW_out) + W_out
}
return(list(W_in = W_in, wagi = wagi, W_out = W_out))
}
trainNN_test <- function( Yname, Xnames, data, h, lr, iteracje_max, seed){
set.seed(seed)
h <- unlist(h, use.names = FALSE)
y_tar <- data[,Yname]
x <- cbind(rep(1, nrow(data[,Xnames]) ), data[,Xnames])
W_in <- matrix(runif(ncol(x) * h[1], -1, 1), nrow = ncol(x))
W_out <- matrix(runif((h[length(h)] + 1), -1, 1), nrow = h[length(h)] + 1 )
wagi <- list()
if(length(h) > 1)
{
for (i in 1:(length(h)-1))
{
wagi[[i]] <- matrix(runif((h[i]+1)*h[i+1], -1, 1), nrow = 1+h[i])
}
}
else
{
wagi[[1]] <- 0
}
for(i in 1:iteracje_max)
{
prop_wp <- propagacja_wprzod_test(x, W_in, wagi, W_out)
prop_ws <- propagacja_wstecz_test(x, y_tar, y_hat = prop_wp$y_hat, z_in = prop_wp$z_in, z_wagi = prop_wp$z_wagi, W_in, wagi, W_out, lr)
W_in <- prop_ws$W_in
wagi <- prop_ws$wagi
W_out <- prop_ws$W_out
cat(paste( "\rIteracja uczenia Sieci Neuronowej: ", i , "/", iteracje_max))
}
wynik <- list( y_hat = prop_wp$y_hat, W_in = W_in, wagi = wagi, W_out = W_out )
return(wynik)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5,15), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,10,5,15,50), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
View(TEST_SIEC_NN)
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(wagi) > 1)
{
for (i in 2:length(wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,5], TEST_SIEC_NN) >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(wagi) > 1)
{
for (i in 2:length(wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(NN_nauczona$wagi) > 1)
{
for (i in 2:length(NN_nauczona$wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
predykcja_NN_test <- function(x_do_pred, NN_nauczona){
x_do_pred <- cbind(rep(1, nrow(x_do_pred)), x_do_pred)
z1 <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(x_do_pred %*% NN_nauczona$W_in))
if(length(NN_nauczona$wagi[[1]]) > 1)
{
z2 <- list()
z2[[1]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z1 %*% NN_nauczona$wagi[[1]]))
if(length(NN_nauczona$wagi) > 1)
{
for (i in 2:length(NN_nauczona$wagi))
{
z2[[i]] <- cbind(matrix(1, nrow = nrow(x_do_pred)), funkcja_sigmoid(z2[[i-1]] %*% NN_nauczona$wagi[[i]]))
}
}
y_hat <- funkcja_sigmoid(z2[[length(NN_nauczona$wagi)]] %*% NN_nauczona$W_out)
}
else
{
y_hat <- funkcja_sigmoid(z1 %*% NN_nauczona$W_out)
}
return(y_hat)
}
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
TEST_SIEC_NN <- trainNN_test(Yname = "Species", Xnames = colnames(iris_data)[-5], data = iris_data, h = c(2,5,8,5), lr =  0.01, iteracje_max = 1000, seed = 357)
TEST_SIEC_NN
table(iris_data[,5], ifelse(TEST_SIEC_NN$y_hat >= 0.5, 1, 0))
table(iris_data[,5], ifelse(predykcja_NN_test(iris_data[,-5], TEST_SIEC_NN) >= 0.5, 1, 0))
library(tidyverse)
library(pROC)
library(ggplot2)
library(StatMatch)
library(dplyr)
library(data.tree)
library(caret)
library(microbenchmark)
library(rpart)
library(rpart.plot)
library(caTools)
library(nnet)
library(parallel)
library(biglm)
library(bigmemory)
library(pryr)
library("doParallel")
library("doSNOW")
clusterExport(klaster, "dane")
bin_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer/breast-cancer.data", header = FALSE)
bin_cancer <- read.csv("breast-cancer.data", header = FALSE)
bin_cancer_X <- colnames(bin_cancer)[-1]
bin_cancer_Y <- colnames(bin_cancer)[1]
bin_cancer[,bin_cancer_Y] <- as.factor(bin_cancer[,bin_cancer_Y])
summary(bin_cancer)
bin_cancer <- bin_cancer[! bin_cancer$V6 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V6 <- as.factor(as.character(bin_cancer$V6))
bin_cancer <- bin_cancer[! bin_cancer$V9 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V9 <- as.factor(as.character(bin_cancer$V9))
bin_cancer$V2 <- as.numeric(bin_cancer$V2)
bin_cancer$V3 <- as.numeric(bin_cancer$V3)
bin_cancer$V4 <- as.numeric(bin_cancer$V4)
bin_cancer$V5 <- as.numeric(bin_cancer$V5)
bin_cancer$V6 <- as.numeric(bin_cancer$V6)
bin_cancer$V7 <- as.numeric(bin_cancer$V7)
bin_cancer$V8 <- as.numeric(bin_cancer$V8)
bin_cancer$V9 <- as.numeric(bin_cancer$V9)
bin_cancer$V10 <- as.numeric(bin_cancer$V10)
summary(bin_cancer)
print("KNN - bin")
parTune_KNN_bin <- expand.grid(k=c(2:2))
parTune_KNN_bin <- expand.grid(k=c(2:2))
source("funkcje.R")
KNN_bin_CrossValid <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 8, parTune_KNN_bin, algorytm="KNN", seed = 123)
source("funkcje.R")
parTune_KNN_bin <- expand.grid(k=c(2:2))
KNN_bin_CrossValid <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 8, parTune_KNN_bin, algorytm="KNN", seed = 123)
source("funkcje.R")
parTune_KNN_bin <- expand.grid(k=c(2:2))
KNN_bin_CrossValid <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 8, parTune_KNN_bin, algorytm="KNN", seed = 123)
View(KNN_bin_CrossValid)
bin_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer/breast-cancer.data", header = FALSE)
# bin_cancer <- read.csv("breast-cancer.data", header = FALSE)
bin_cancer_X <- colnames(bin_cancer)[-1]
bin_cancer_Y <- colnames(bin_cancer)[1]
bin_cancer[,bin_cancer_Y] <- as.factor(bin_cancer[,bin_cancer_Y])
summary(bin_cancer)
bin_cancer <- bin_cancer[! bin_cancer$V6 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V6 <- as.factor(as.character(bin_cancer$V6))
bin_cancer <- bin_cancer[! bin_cancer$V9 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V9 <- as.factor(as.character(bin_cancer$V9))
bin_cancer$V2 <- as.numeric(bin_cancer$V2)
bin_cancer$V3 <- as.numeric(bin_cancer$V3)
bin_cancer$V4 <- as.numeric(bin_cancer$V4)
bin_cancer$V5 <- as.numeric(bin_cancer$V5)
bin_cancer$V6 <- as.numeric(bin_cancer$V6)
bin_cancer$V7 <- as.numeric(bin_cancer$V7)
bin_cancer$V8 <- as.numeric(bin_cancer$V8)
bin_cancer$V9 <- as.numeric(bin_cancer$V9)
bin_cancer$V10 <- as.numeric(bin_cancer$V10)
summary(bin_cancer)
dane_multi <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = "\t")
dane_multi <- drop_na(dane_multi)
multi_kolumny <- colnames(dane_multi)
dane_multi_X <- multi_kolumny[-8]
dane_multi_Y <- multi_kolumny[8]
dane_multi[,8] <- as.factor(dane_multi[,8])
dane_multi <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = "\t")
View(dane_multi)
dane_multi <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = ",")
View(dane_multi)
multi_abalone <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = ",")
View(multi_abalone)
anyNA(multi_abalone)
View(multi_abalone)
multi_abalone <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = ",")
multi_abalone_X <-colnames(multi_abalone)[-1]
multi_abalone_Y <- colnames(multi_abalone)[1]
multi_abalone[,1] <- as.factor(multi_abalone[,1])
hiper_parametry_KNN_multi <- expand.grid(k=c(2:2))
KNN_multi_CrossValid <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_KNN_multi, algorytm="KNN", seed = 123)
source("funkcje.R")
hiper_parametry_KNN_multi <- expand.grid(k=c(2:2))
KNN_multi_CrossValid <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_KNN_multi, algorytm="KNN", seed = 123)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data", header = FALSE)
View(dane_reg)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data", header = FALSE, sep = " ")
View(dane_reg)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data", header = FALSE, sep = "\t")
View(dane_reg)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data", header = FALSE, sep = "  ")
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data", header = FALSE, sep = " ")
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data", header = FALSE, sep = " ")
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv", header = FALSE, sep = ",")
View(dane_reg)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00519/heart_failure_clinical_records_dataset.csv", header = TRUE, sep = ",")
View(dane_reg)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = TRUE, sep = ",")
View(dane_reg)
dane_reg <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = FALSE, sep = ",")
View(dane_reg)
reg_automobile <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = FALSE, sep = ",")
View(dane_reg)
reg_automobile <- reg_automobile[,-2]
View(reg_automobile)
View(dane_reg)
View(dane_reg)
reg_automobile <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = FALSE, sep = ",")
reg_automobile_X <- colnames(reg_automobile)[-26]
reg_automobile_Y <- colnames(reg_automobile)[26]
reg_automobile <- reg_automobile[! reg_automobile$V26 == "?",]
reg_automobile
View(reg_automobile)
reg_automobile <- sapply(reg_automobile, as.numeric)
View(reg_automobile)
reg_automobile <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = FALSE, sep = ",")
reg_automobile_X <- colnames(reg_automobile)[-26]
reg_automobile_Y <- colnames(reg_automobile)[26]
reg_automobile <- reg_automobile[! reg_automobile$V26 == "?",]
reg_automobile <- as.data.frame(sapply(reg_automobile, as.numeric))
View(reg_automobile)
source("funkcje.R")
hiper_parametry_KNN_reg <- expand.grid(k=c(2:2))
Kroswalidacja_KNN_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, parTune_KNN_reg, algorytm="KNN", seed = 123)
hiper_parametry_KNN_reg <- expand.grid(k=c(2:2))
Kroswalidacja_KNN_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, hiper_parametry_KNN_reg, algorytm="KNN", seed = 123)
source("funkcje.R")
hiper_parametry_KNN_reg <- expand.grid(k=c(2:2))
Kroswalidacja_KNN_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, hiper_parametry_KNN_reg, algorytm="KNN", seed = 123)
print(Kroswalidacja_KNN_reg)
source("funkcje.R")
print("Tree - bin")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
source("funkcje.R")
print("Tree - bin")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
source("funkcje.R")
print("Tree - bin")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
hiper_parametry_KNN_reg <- expand.grid(k=c(2:2))
Kroswalidacja_KNN_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, hiper_parametry_KNN_reg, algorytm="KNN", seed = 123)
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
source("funkcje.R")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
View(Kroswalidacja_Tree_bin)
source("funkcje.R")
print("Tree - bin")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
warnings()
source("funkcje.R")
print("Tree - bin")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
source("funkcje.R")
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.01))
Kroswalidacja_Tree_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
View(Kroswalidacja_Tree_bin)
source("funkcje.R")
parTune_Tree_multi <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.0))
Tree_multi_CrossValid <- CrossValidTune(dane_multi, dane_multi_X, dane_multi_Y, kFold = 9, parTune_Tree_multi, algorytm="Tree", seed = 123)
hiper_parametry_Tree_multi <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.0))
Kroswalidacja_Tree_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_Tree_multi, algorytm="Tree", seed = 123)
source("funkcje.R")
hiper_parametry_Tree_reg <- expand.grid(depth=c(2:8), minobs=c(2:8), type=c('SS'), overfit = c('none'), cf=0.0)
Kroswalidacja_Tree_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
hiper_parametry_Tree_reg <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('SS'), overfit = c('none'), cf=0.1)
Kroswalidacja_Tree_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, hiper_parametry_Tree_reg, algorytm="Tree", seed = 123)
View(Kroswalidacja_Tree_reg)
hiper_parametry_Tree_multi <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.1))
Kroswalidacja_Tree_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_Tree_multi, algorytm="Tree", seed = 123)
View(Kroswalidacja_Tree_multi)
source("funkcje.R")
hiper_parametry_Tree_multi <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.1))
Kroswalidacja_Tree_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_Tree_multi, algorytm="Tree", seed = 123)
multi_abalone[,1] <- as.factor(as.numeric((multi_abalone[,1])))       # Dla pewnosci ze pierwsza kolumna - "Y" - jest factorem
summary(multi_abalone)
hiper_parametry_Tree_multi <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.1))
Kroswalidacja_Tree_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_Tree_multi, algorytm="Tree", seed = 399)
View(Kroswalidacja_Tree_multi)
source("funkcje.R")
hiper_parametry_Tree_multi <- expand.grid(depth=c(8:8), minobs=c(2:2), type=c('Entropy'), overfit = c('none'), cf=c(0.1))
Kroswalidacja_Tree_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_Tree_multi, algorytm="Tree", seed = 399)
View(Kroswalidacja_Tree_multi)
source("funkcje.R")
print("Sieci NN - bin")
hiper_parametry_NN_bin <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_NN_bin, algorytm="NN", seed = 399)
source("funkcje.R")
print("Sieci NN - bin")
hiper_parametry_NN_bin <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_NN_bin, algorytm="NN", seed = 399)
hiper_parametry_NN_bin <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_NN_bin, algorytm="NN", seed = 399)
source("funkcje.R")
hiper_parametry_NN_bin <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_NN_bin, algorytm="NN", seed = 399)
source("funkcje.R")
hiper_parametry_NN_bin <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_bin <- CrossValidTune(bin_cancer, bin_cancer_X, bin_cancer_Y, kFold = 9, hiper_parametry_NN_bin, algorytm="NN", seed = 399)
View(Kroswalidacja_NN_bin)
hiper_parametry_NN_multi <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_NN_multi, algorytm="NN", seed = 399)
source("funkcje.R")
hiper_parametry_NN_multi <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_multi <- CrossValidTune(multi_abalone, multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_NN_multi, algorytm="NN", seed = 399)
source("funkcje.R")
source("funkcje.R")
bin_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer/breast-cancer.data", header = FALSE)
# bin_cancer <- read.csv("breast-cancer.data", header = FALSE)
bin_cancer_X <- colnames(bin_cancer)[-1]
bin_cancer_Y <- colnames(bin_cancer)[1]
bin_cancer[,bin_cancer_Y] <- as.factor(bin_cancer[,bin_cancer_Y])
summary(bin_cancer)
bin_cancer <- bin_cancer[! bin_cancer$V6 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V6 <- as.factor(as.character(bin_cancer$V6))
bin_cancer <- bin_cancer[! bin_cancer$V9 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V9 <- as.factor(as.character(bin_cancer$V9))
bin_cancer$V2 <- as.numeric(bin_cancer$V2)
bin_cancer$V3 <- as.numeric(bin_cancer$V3)
bin_cancer$V4 <- as.numeric(bin_cancer$V4)
bin_cancer$V5 <- as.numeric(bin_cancer$V5)
bin_cancer$V6 <- as.numeric(bin_cancer$V6)
bin_cancer$V7 <- as.numeric(bin_cancer$V7)
bin_cancer$V8 <- as.numeric(bin_cancer$V8)
bin_cancer$V9 <- as.numeric(bin_cancer$V9)
bin_cancer$V10 <- as.numeric(bin_cancer$V10)
summary(bin_cancer)
multi_abalone <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = ",")
multi_abalone_X <- colnames(multi_abalone)[-1]
multi_abalone_Y <- colnames(multi_abalone)[1]
multi_abalone[,1] <- as.factor(as.numeric((multi_abalone[,1])))       # Dla pewnosci ze pierwsza kolumna - "Y" - jest factorem
summary(multi_abalone)
reg_automobile <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = FALSE, sep = ",")
reg_automobile_X <- colnames(reg_automobile)[-26]
reg_automobile_Y <- colnames(reg_automobile)[26]
reg_automobile <- reg_automobile[! reg_automobile$V26 == "?",]          # Usuniecie wierszy z wartosciami '?'
reg_automobile <- as.data.frame(sapply(reg_automobile, as.numeric))     # Zamiana kolumn na numeryczne
summary(reg_automobile)
hiper_parametry_NN_reg <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_reg <- CrossValidTune(reg_automobile, reg_automobile_X, reg_automobile_Y, kFold = 9, hiper_parametry_NN_reg, algorytm="NN", seed = 399)
hiper_parametry_NN_multi <- expand.grid(h=list(c(3,5)), lr = c(0.01), iter = c(50000))
Kroswalidacja_NN_multi <- CrossValidTune(multi_abalone[1:500,], multi_abalone_X, multi_abalone_Y, kFold = 9, hiper_parametry_NN_multi, algorytm="NN", seed = 399)
View(Kroswalidacja_NN_multi)
hiper_parametry_Tree_bin <- expand.grid(depth=c(3,5,10,15), minobs=c(2,5,10), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.4))
View(hiper_parametry_Tree_bin)
hiper_parametry_Tree_bin <- expand.grid(depth=c(3,5,10), minobs=c(2,10), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.4))
View(hiper_parametry_Tree_bin)
hiper_parametry_Tree_multi <- expand.grid(depth=c(3,10), minobs=c(2,10), type=c('Entropy', 'Gini'), overfit = c('none', 'prune'), cf=c(0.4))
View(hiper_parametry_Tree_multi)
hiper_parametry_NN_bin <- expand.grid(h=list(c(2,2), c(3,6), c(6,3), c(6,6)), lr = c(0.01), iter = c(50000))
View(hiper_parametry_NN_bin)
source("funkcje.R")
# Dane do Projektu:
# Klasyfikacja Binarna      = https://archive.ics.uci.edu/ml/datasets/Breast+Cancer
# Klasyfikacja Wieloklasowa = https://archive.ics.uci.edu/ml/datasets/Abalone
# Regresja                  = https://archive.ics.uci.edu/ml/datasets/Automobile
bin_cancer <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer/breast-cancer.data", header = FALSE)
# bin_cancer <- read.csv("breast-cancer.data", header = FALSE)
bin_cancer_X <- colnames(bin_cancer)[-1]
bin_cancer_Y <- colnames(bin_cancer)[1]
bin_cancer[,bin_cancer_Y] <- as.factor(bin_cancer[,bin_cancer_Y])
summary(bin_cancer)
bin_cancer <- bin_cancer[! bin_cancer$V6 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V6 <- as.factor(as.character(bin_cancer$V6))
bin_cancer <- bin_cancer[! bin_cancer$V9 == "?",]       # Usuniecie wierszy z wartosciami '?'
bin_cancer$V9 <- as.factor(as.character(bin_cancer$V9))
bin_cancer$V2 <- as.numeric(bin_cancer$V2)
bin_cancer$V3 <- as.numeric(bin_cancer$V3)
bin_cancer$V4 <- as.numeric(bin_cancer$V4)
bin_cancer$V5 <- as.numeric(bin_cancer$V5)
bin_cancer$V6 <- as.numeric(bin_cancer$V6)
bin_cancer$V7 <- as.numeric(bin_cancer$V7)
bin_cancer$V8 <- as.numeric(bin_cancer$V8)
bin_cancer$V9 <- as.numeric(bin_cancer$V9)
bin_cancer$V10 <- as.numeric(bin_cancer$V10)
summary(bin_cancer)
multi_abalone <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", header = FALSE, sep = ",")
multi_abalone_X <- colnames(multi_abalone)[-1]
multi_abalone_Y <- colnames(multi_abalone)[1]
multi_abalone[,1] <- as.factor(as.numeric((multi_abalone[,1])))       # Dla pewnosci ze pierwsza kolumna - "Y" - jest factorem
summary(multi_abalone)
reg_automobile <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data", header = FALSE, sep = ",")
reg_automobile_X <- colnames(reg_automobile)[-26]
reg_automobile_Y <- colnames(reg_automobile)[26]
reg_automobile <- reg_automobile[! reg_automobile$V26 == "?",]          # Usuniecie wierszy z wartosciami '?'
reg_automobile <- as.data.frame(sapply(reg_automobile, as.numeric))     # Zamiana kolumn na numeryczne
summary(reg_automobile)
save.image(file="1.RData")

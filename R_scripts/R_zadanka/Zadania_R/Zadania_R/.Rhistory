cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mc = matr.ncol();
int mn = matr.nrow();
if (isrow == 0){
for(int i=0; i<mc; i++){
for(int j=0; j<mn; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mn; i++){
for(int j=0; j<mc; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
install.packages('rbenchmark')
install.packages('microbenchmark')
install.packages('profvis')
library(rbenchmark)
library(microbenchmark)
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mc = matr.ncol();
int mn = matr.nrow();
if (isrow == 0){
for(int i=0; i<mc; i++){
for(int j=0; j<mn; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mn; i++){
for(int j=0; j<mc; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
library(Rcpp)
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mc = matr.ncol();
int mn = matr.nrow();
if (isrow == 0){
for(int i=0; i<mc; i++){
for(int j=0; j<mn; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mn; i++){
for(int j=0; j<mc; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
matrixCpp(1:20, 4, 5, 0)
matrix(
data = 1:20,
nrow = 4,
ncol = 5,
byrow = F
)
benchmark(matrix(
data = 1:20,
nrow = 4,
ncol = 5,
byrow = F
) ,
matrixCpp(1:20, 4, 5, 0))
microbenchmark(matrix(
data = 1:20,
nrow = 4,
ncol = 5,
byrow = F
) ,
matrixCpp(1:20, 4, 5, 0))
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mcol = matr.ncol();
int mrow = matr.nrow();
if (isrow == 0){
for(int i=0; i<mcol; i++){
for(int j=0; j<mrow; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mn; i++){
for(int j=0; j<mc; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mcol = matr.ncol();
int mrow = matr.nrow();
if (isrow == 0){
for(int i=0; i<mcol; i++){
for(int j=0; j<mrow; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mn; i++){
for(int j=0; j<mc; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mcol = matr.ncol();
int mrow = matr.nrow();
if (isrow == 0){
for(int i=0; i<mcol; i++){
for(int j=0; j<mrow; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mrow; i++){
for(int j=0; j<mcol; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
vec_test <- seq(1,100,length.out = 25)
vec_cpp <- matrixCpp(vec_test, 5, 5, 0)
View(vec_cpp)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 5, byrow = F)
View(vec_R)
View(vec_cpp)
View(vec_R)
vec_test <- seq(1,100,length.out = 25)
vec_cpp <- matrixCpp(vec_test, 5, 5, 0)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 5, byrow = F)
benchmark(matrix(data = vec_test, nrow = 5, ncol = 5, byrow = F), matrixCpp(vec_test, 5, 5, 0))
microbenchmark(matrix(data = vec_test, nrow = 5, ncol = 5, byrow = F), matrixCpp(vec_test, 5, 5, 0))
vec_test <- seq(1,100,length.out = 100)
vec_cpp <- matrixCpp(vec_test, 5, 20, 0)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F)
benchmark(matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F), matrixCpp(vec_test, 5, 20, 0))
microbenchmark(matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F), matrixCpp(vec_test, 5, 20, 0))
View(vec_cpp)
View(vec_R)
View(vec_cpp)
View(vec_R)
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mcol = matr.ncol();
int mrow = matr.nrow();
if (isrow == 0){
for(int i=0; i<mcol; i++){
for(int j=0; j<mrow; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mrow; i++){
for(int j=0; j<mcol; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
# wektor testowy 5x5
vec_test <- seq(1,100,length.out = 10000)
vec_cpp <- matrixCpp(vec_test, 5, 20, 0)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F)
benchmark(matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F), matrixCpp(vec_test, 5, 20, 0))
microbenchmark(matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F), matrixCpp(vec_test, 5, 20, 0))
profvis({
vec_test <- seq(1,100,length.out = 10000)
vec_cpp <- matrixCpp(vec_test, 5, 20, 0)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F)
})
profvis({
vec_test <- seq(1,100,length.out = 10000)
vec_cpp <- matrixCpp(vec_test, 5, 20, 0)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F)
})
profvis({
vec_test <- seq(1,100000,length.out = 10000000)
vec_cpp <- matrixCpp(vec_test, 5, 20, 0)
vec_R <- matrix(data = vec_test, nrow = 5, ncol = 20, byrow = F)
})
View(vec_cpp)
profvis({
vec_test <- seq(1,100000,length.out = 10000000)
vec_cpp <- matrixCpp(vec_test, 1000, 10000, 0)
vec_R <- matrix(data = vec_test, nrow = 1000, ncol = 10000, byrow = F)
})
profvis({
vec_test <- seq(1,100000,length.out = 100000000)
vec_cpp <- matrixCpp(vec_test, 10000, 10000, 0)
vec_R <- matrix(data = vec_test, nrow = 10000, ncol = 10000, byrow = F)
})
benchmark( matrix(data = vec_test, nrow = 10000, ncol = 10000, byrow = F), matrixCpp(vec_test, 10000, 10000, 0))
vec_test <- sample(seq(1,100, by=0.5), size=100000000, replace = TRUE)
library(rbenchmark)
library(microbenchmark)
library(Rcpp)
library(rbenchmark)
library(microbenchmark)
library(Rcpp)
cppFunction(code = {
'
NumericMatrix matrixCpp(NumericVector x, int a, int b, bool isrow=0){
int k=0;
NumericMatrix matr(a, b);
int mcol = matr.ncol();
int mrow = matr.nrow();
if (isrow == 0){
for(int i=0; i<mcol; i++){
for(int j=0; j<mrow; j++){
matr(j,i)=x[k];
k++;
}
}
}
else{
for(int i=0; i<mrow; i++){
for(int j=0; j<mcol; j++){
matr(i,j)=x[k];
k++;
}
}
}
return(matr);
}
'
})
# wektor testowy 5x5
set.seed(123)
vec_test <- sample(seq(1,100, by=0.5), size=100000000, replace = TRUE)
vec_cpp <- matrixCpp(vec_test, 10000, 10000, 0)
vec_R <- matrix(data = vec_test, nrow = 10000, ncol = 10000, byrow = F)
View(vec_cpp)
profvis({
vec_test <- sample(seq(1,100, by=0.5), size=100000000, replace = TRUE)
vec_cpp <- matrixCpp(vec_test, 10000, 10000, 0)
vec_R <- matrix(data = vec_test, nrow = 10000, ncol = 10000, byrow = F)
})
set.seed(123)
vec_test <- sample(seq(1,100, by=0.5), size=100000000, replace = TRUE)
profvis({
vec_cpp <- matrixCpp(vec_test, 10000, 10000, 0)
vec_R <- matrix(data = vec_test, nrow = 10000, ncol = 10000, byrow = F)
})
set.seed(123)
vec_test <- sample(seq(1,100, by=0.5), size=1000000000, replace = TRUE)
profvis({
vec_cpp <- matrixCpp(vec_test, 100000, 10000, 0)
vec_R <- matrix(data = vec_test, nrow = 100000, ncol = 10000, byrow = F)
})
